version: "3.5"


x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.3.2}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres13/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres13/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres13/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    ## AIRFLOW__CORE__BASE_LOG_FOLDER: '/opt/airflow/logs'
    AIRFLOW__LOGGING__BASE_LOG_FOLDER: '/opt/airflow/logs'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    # AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.default'
    AIRFLOW__WEBSERVER__AUTHENTICATE: 'true'
    AIRFLOW__WEBSERVER__RBAC: 'true'
    AIRFLOW__API__ENABLE_EXPERIMENTAL_API: 'true'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./src/docker-airflow/dags:/opt/airflow/dags
    - ./src/docker-airflow/logs:/opt/airflow/logs
    - ./src/docker-airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock:rw
    - testbed_mount_volume_src:/testbed_mount_volume_dst:Z
  user: "0:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres13:
      condition: service_healthy



services:

  reverse-proxy:
    image: reverse-proxy-resty-local
    ports:
      - 8888:80
      - 443:443
    container_name: reverse-proxy
    build:
      context: ./src/reverse-proxy-resty-local/
      dockerfile: Dockerfile
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./src/reverse-proxy-resty-local/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ./src/reverse-proxy-resty-local/conf.d/:/etc/nginx/conf.d
      - ./logs/nginx-resty-local/:/usr/local/openresty/nginx/logs/
    command: /usr/local/openresty/nginx/sbin/nginx -g 'daemon off;' -c /usr/local/openresty/nginx/conf/nginx.conf
    depends_on:
      - web
      - app
      - ip

  web:
    env_file:
      - ./src/frontend/web_ui/.env
    image: vue-server
    ports:
      - 8000:8000
    container_name: vue-server
    build:
      context: ./src/frontend/
      dockerfile: Dockerfile
    privileged: true # 管理者権限の付与
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./src/frontend/:/app/
      - node_modules:/app/web_ui/node_modules
    tty: true # 起動状態を維持
    stdin_open: true # コンソール立ち上げ
    command: sh -c "echo serving vue server... && cd /app/web_ui/ && yarn run serve-docker"

  app:
    build:
      context: ./src/backend/
      dockerfile: Dockerfile
      args: 
        - UPLOAD_PATH=${UPLOAD_PATH}
        - UPLOAD_ZIP_PATH=${UPLOAD_ZIP_PATH}
    image: app
    container_name: backend
    expose: 
      - ${BACKEND_FLASK_PORT}
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - FLASK_PORT=${BACKEND_FLASK_PORT}
      - FLASK_CONFIG=${BACKEND_FLASK_CONFIG}
      - UPLOAD_PATH=${UPLOAD_PATH}
      - UPLOAD_ZIP_PATH=${UPLOAD_ZIP_PATH}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./src/backend/:/work/
      - ./src/dag:/dag/
      - ./src/docker-airflow/logs:/src/airflow_logs
      - testbed_mount_volume_src:/testbed_mount_volume_dst:Z
      - ./logs/app:/work/logs
      - /var/run/docker.sock:/var/run/docker.sock:rw # dockerソケット
    command: 
      ['python', '-m', 'entrypoint', 'startserver']
    networks:
      - default
    depends_on: 
      - psql

  psql:
    build:
      context: ./src/storage/psql_12
      dockerfile: Dockerfile
    image: psql
    container_name: "psql"
    ports: 
      - "5432:5432"
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - POSTGRES_USER=${PSQL_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PSQL_POSTGRES_PASSWORD}
      - POSTGRES_DB=${PSQL_POSTGRES_DB}
      - DATABASE_HOST=${PSQL_DATABASE_HOST}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - psql-data:/var/lib/postgresql/data

  pgadmin4:
    image: dpage/pgadmin4:4
    container_name: "pgadmin4"
    ports:
      - "5051:80"
    volumes:
      - pgadmin4-data:/var/lib/pgadmin
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    hostname: localhost
    depends_on:
      - psql

  ip:
    build:
      context: ./src/integration-provider
      dockerfile: Dockerfile
    image: integration-provider
    container_name: ip
    ports: 
      - ${IP_FLASK_PORT}:${IP_FLASK_PORT}
    expose: 
      - ${IP_FLASK_PORT}
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
      - FLASK_PORT=${IP_FLASK_PORT}
      - FLASK_CONFIG=${IP_FLASK_CONFIG}
      - IP_ROOT_DAG_DIR_PATH=${IP_ROOT_DAG_DIR_PATH}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./src/integration-provider:/work/
      - ./src/dag:/dag/
      - ./src/docker-airflow/logs:/src/airflow_logs
      - testbed_mount_volume_src:/testbed_mount_volume_dst:Z
      - /var/run/docker.sock:/var/run/docker.sock:rw # デプロイ用のdockerソケット
      - ./logs/ip:/work/logs
    command: 
      ['python', '-m', 'entrypoint', 'startserver']
    depends_on: 
      - psql
      - postgres13

  postgres13:
    image: postgres:13
    ports: 
      - "5433:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - postgres13-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: bash -c "pip install Flask-Admin airflow-xtended-api && airflow webserver"
    container_name: "airflow"
    ports:
      - 8180:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8180/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        chmod -R 777 /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    extra_hosts:
      - "host.docker.internal:host-gateway"
    user: "0:0"
    volumes:
      - .:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  registry:
    container_name: registry
    image: registry:latest
    hostname: local-registry
    environment:
      - CONTAINER_FLAG=${CONTAINER_FLAG}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 5050:5000
    volumes:
      - registry-data:/var/registry-data
  # registry-frontend:
  #   image: konradkleine/docker-registry-frontend:v2
  #   container_name: registry-frontend
  #   hostname: registry-frontend
  #   environment:
  #     ENV_DOCKER_REGISTRY_HOST: registry
  #     ENV_DOCKER_REGISTRY_PORT: 5000
  #   ports:
  #     - 8001:80

  ait-installer:
    build:
      context: ./src/ait-installer
      dockerfile: Dockerfile
    container_name: "ait-installer"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on: 
      - app
      - ip

volumes:
  node_modules: {}
  psql-data:
    driver: local
  pgadmin4-data:
    driver: local
  testbed_mount_volume_src:
    driver: local
    name: testbed_mount_volume_src
  postgres13-db-volume:
    driver: local
  pgadmin44-data:
    driver: local
  registry-data:
    driver: local

# 外部（AIT-HUB）のdocker network
networks:
  aithub_app_net:
    external: true
