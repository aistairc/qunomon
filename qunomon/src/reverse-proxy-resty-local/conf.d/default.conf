server {
    listen 80;
    server_name 0.0.0.0;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name  0.0.0.0;
    ssl_certificate /etc/nginx/cert/server.crt;
    ssl_certificate_key /etc/nginx/cert/server.key;


    # To sockjs-node
    location /sockjs-node/ {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;

        proxy_pass http://web:8080;
        proxy_redirect off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";  
    }

    # To backend
    location /qai-testbed/api/0.0.1/health-check {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_pass http://app:5000;
        proxy_next_upstream_timeout 1800;
        proxy_next_upstream_tries 1;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        send_timeout 1800;
    }
    location /qai-testbed/api/ {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_pass http://app:5000;
        proxy_next_upstream_timeout 1800;
        proxy_next_upstream_tries 1;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        send_timeout 1800;
    }

    # To integration provider 
    # only use dag deploy for alpha edition 
    # remove to rc edition
    location /qai-ip/api/0.0.1/health-check {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_pass http://ip:6000;
        proxy_next_upstream_timeout 1800;
        proxy_next_upstream_tries 1;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        send_timeout 1800;
    }
    location /qai-ip/api/ {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_pass http://ip:6000;
        proxy_next_upstream_timeout 1800;
        proxy_next_upstream_tries 1;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        send_timeout 1800;
    }

    # To frontend
    location / {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_pass http://web:8080/;
        proxy_redirect http:// https://;
    }
    
    # To backend (Wrapper)
    location /x-qai-testbed/api/ {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_pass https://localhost/qai-testbed/api/;
        proxy_redirect off;

        proxy_http_version 1.1;

        proxy_next_upstream_timeout 1800;
        proxy_next_upstream_tries 1;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        send_timeout 1800;
    }

    # To integration provider (Wrapper)
    location /x-qai-ip/api/ {
        access_by_lua_block {
            ngx.header.content_type = 'charset=utf-8'
        }
        proxy_pass https://localhost/qai-ip/api/;
        proxy_redirect off;

        proxy_http_version 1.1;

        proxy_next_upstream_timeout 1800;
        proxy_next_upstream_tries 1;
        proxy_connect_timeout 1800;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        send_timeout 1800;
    }

    # To setting画面
    location /Setting {
        access_by_lua_block {
          local openidc = require("resty.openidc")
          openidc.set_logging(nil, { DEBUG = ngx.INFO })

          local opts = {
            ssl_verify = "no",
            scope = "openid",
            session_contents = {id_token=true,access_token=true},
            use_pkce = true,
            redirect_uri = "https://127.0.0.1:443/Setting/redirect_uri",
            discovery = "https://qai-auth.pj.aist.go.jp/realms/QAI/.well-known/openid-configuration",
            client_id = "Local-Qunomon-Client",
            client_secret = "geBtGTCa0fvprmwjmpxX8CzBawRrFaZ4",
            post_logout_redirect_uri = "https://127.0.0.1:443",
            logout_path = "/Setting/logout",
            redirect_after_logout_with_id_token_hint = true,
            redirect_after_logout_uri = "/",
            revoke_tokens_on_logout = true,
            renew_access_token_on_expiry = true,
            access_token_expires_in = 300,
            access_token_expires_leeway = 10,
          }
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          ngx.req.set_header("X-USER", res.id_token.preferred_username)
          ngx.req.set_header("X-GROUP", res.id_token.groups)
          ngx.req.set_header("X-ROLE", res.id_token.role)
          ngx.req.set_header("X-TOEKN", res.access_token)
          ngx.req.set_header("Authorization", "Bearer " .. res.access_token)

          ngx.header.content_type = 'charset=utf-8'
        }

        proxy_pass http://web:8080/;
        proxy_redirect http:// https://;
    }

    # To AITHUB (Wrapper)
    location ~ /x-ait-hub/api/(.*) {
        access_by_lua_block {
          local openidc = require("resty.openidc")
          openidc.set_logging(nil, { DEBUG = ngx.INFO })

          local opts = {
            ssl_verify = "no",
            scope = "openid",
            session_contents = {id_token=true,access_token=true},
            use_pkce = true,
            redirect_uri = "https://127.0.0.1:443/Setting/redirect_uri",
            discovery = "https://qai-auth.pj.aist.go.jp/realms/QAI/.well-known/openid-configuration",
            client_id = "Local-Qunomon-Client",
            client_secret = "geBtGTCa0fvprmwjmpxX8CzBawRrFaZ4",
            renew_access_token_on_expiry = true,
            access_token_expires_in = 300,
            access_token_expires_leeway = 10,
          }
          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          ngx.req.set_header("X-USER", res.id_token.preferred_username)
          ngx.req.set_header("X-GROUP", res.id_token.groups)
          ngx.req.set_header("X-ROLE", res.id_token.role)
          ngx.req.set_header("X-TOEKN", res.access_token)
          ngx.req.set_header("Authorization", "Bearer " .. res.access_token)

          ngx.header.content_type = 'charset=utf-8'
        }

        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        # proxy_set_header Authorization "Bearer $arg_token";
        # proxy_set_header X-Forwarded-Proto https;

        set $path https://ait-hub.pj.aist.go.jp/ait-hub/api/; 
        proxy_pass $path/$1$is_args$args;
        ## proxy_pass https://18.181.188.65/ait-hub/api/;
        ## proxy_pass http://172.31.34.209:442/ait-hub/api/;
        ## proxy_pass http://127.0.0.1:3031/ait-hub/api/;
        proxy_redirect off;

        proxy_http_version 1.1;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        ## root   /usr/share/nginx/html;
        root   /usr/local/openresty/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

