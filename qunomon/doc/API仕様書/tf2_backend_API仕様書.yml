openapi: 3.0.0
info:
  title: TF2 API
  description: TF2 QAI-Testbed API.
  version: 1.0.0
servers:
  - url: 'https://127.0.0.1/qai-testbed/api/0.0.1'
    description: Back end server
paths:
  '/login':
    post:
      tags:
        - Login
      security: []
      summary: ログイン情報入力
      description: |
        アカウントID、パスワードを入力し、ユーザ認証を行う。
      requestBody:
        description: ログインユーザのアカウントIDとパスワードを設定
        content:
          application/json:
            schema:
              required:
                - AccountId
                - Password
              properties:
                AccountId:
                  description: ログインに使用するアカウントID
                  type: string
                Password:
                  description: ログインに使用するパスワード
                  type: string
            example:
              AccountId: user
              Password: user_pass
      responses:
        '200':
          description: |
            ログインユーザ情報の取得に成功。  
            セッションIDはJSESSIONIDの名称でクッキーに保存される。  
            ログインを必要とするリクエストでは本セッションIDが必要となる。  
            ログインユーザ／セッションIDとロールの紐づけは内部のDBで行われる想定。 
          content:
            application/json:
              schema:
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                  UserInfo:
                    type: object
                    description: ログイン済みのユーザ情報
                    properties:
                      UserId:
                        type: string
                        description: ユーザID
                      UserName:
                        type: string
                        description: ユーザ名
                      OrganizerId:
                        type: string
                        description: 組織ID
                      OrganizerName:
                        type: string
                        description: 組織名
                example:
                  Result:
                    Code: L01000
                    Message: Login Success
                  UserInfo: 
                    UserId: 2
                    UserName: "開発者A"
                    OrganizerId: 1
                    OrganizerName: "dep-A"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "JSESSIONID=abcde12345; Path=/; HttpOnly"
        '403':
          description: アカウントが失効している。アカウント登録はあるが、有効期限が切れている。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'L01001'
                      Message: An account has expired.
        '404':
          description: アカウントが存在しない。もしくパスワードが間違っている
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'L01002'
                      Message: Failed user login.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'L01999'
                      Message: Unknown server error has occured.

  '/{OrganizerId}/mlComponents':
    get:
      tags:
        - mlComponents
      summary: 機械学習コンポーネント一覧表示.
      description: ログインユーザの組織に紐付く機械学習コンポーネント一覧情報を取得し、機械学習コンポーネント一覧画面に遷移し表示
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID(ログイン情報入力でのレスポンスから取得)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 機械学習コンポーネント一覧情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - mlComponents
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: string
                      Massage:
                        type: string
                  mlComponents:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                      Description:
                        type: string
                      ProblemDomain:
                        type: string
                      MLFrameworkName:
                        type: string
                      GuidelineName:
                        type: string
                example:
                  Result:
                    Code: 'P12000'
                    Message: Success.
                  mlComponents:
                    - Id: 1
                      Name: A社住宅価格予測-機械学習コンポーネント
                      Description: A社の住宅価格を予測する機械学習コンポーネント
                      ProblemDomain: 重回帰分析
                      MLFrameworkName: Tensorflow-2.3
                      GuidelineName: AIQM Guideline
                    - Id: 2
                      Name: B社文字認識-機械学習コンポーネント
                      Description: B社の文字を認識する機械学習コンポーネント
                      ProblemDomain: 画像分類
                      MLFrameworkName: Tensorflow-2.3
                      GuidelineName: AIQM Guideline
                    - Id: 3
                      Name: C社ゴルフスコア読取-機械学習コンポーネント
                      Description: C社のスコア表枠組み、文字を認識する機械学習コンポーネント
                      ProblemDomain: レイアウト認識、画像分類
                      MLFrameworkName: Tensorflow-2.3
                      GuidelineName: AIQM Guideline
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P12001'
                      Message: Unauthorized request.
        '404':
          description: アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P12002'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    post:
      tags:
        - mlComponents
      summary: 機械学習コンポーネント追加.
      description: 機械学習コンポーネントを追加する
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
      requestBody:
        description: 機械学習コンポーネント追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - Description
                - ProblemDomain
                - MLFrameworkId
                - GuidelineId
                - ScopeId
              properties:
                Name:
                  type: string
                Description:
                  type: string
                ProblemDomain:
                  type: string
                  description: |
                    機械学習コンポーネントの対象とする問題領域を記載する。  
                MLFrameworkId:
                  type: integer  
                  description: |
                    機械学習フレームワークのIDを記載する  
                    名称とIDはGET /mlFrameworksで取得する。
                GuidelineId:
                  type: integer
                  description: |
                    関連するガイドラインIDを記載する。  
                ScopeId:
                  type: integer
                  description: |
                    関連するスコープIDを記載する。  
                GuidelineReason:
                  type: string
                  description: |
                    ガイドラインを選択した理由を記載する。  
                ScopeReason:
                  type: string
                  description: |
                    スコープを選択した理由を記載する。  
            example:
              Name: Fashion Classifier
              Description: Fashion image classification
              ProblemDomain: ImageClassification
              MLFrameworkId: 1
              GuidelineId: 1
              ScopeId: 1
              GuidelineReason: This guideline fits the project.
              ScopeReason: This scope fits the project.
      responses:
        '200':
          description: 追加完了
          content:
            application/json:
              schema:
                required:
                  - Result
                  - MLComponentId
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: string
                      Massage:
                        type: string
                  MLComponentId:
                    type: integer
                example:
                  Result:
                    Code: 'P22000'
                    Message: Success.
                  MLComponentId: 4
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P22001'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P22002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P22003'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P22004'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponentsFront':
    post:
      tags:
        - mlComponents
      summary: 機械学習コンポーネント追加（scrfトークンありで使用）.
      description: 機械学習コンポーネントを追加する（scrfトークンありで使用）
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
      requestBody:
        description: 機械学習コンポーネント追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - Description
                - ProblemDomain
                - MLFrameworkId
                - GuidelineId
                - ScopeId
              properties:
                Name:
                  type: string
                Description:
                  type: string
                ProblemDomain:
                  type: string
                  description: |
                    機械学習コンポーネントの対象とする問題領域を記載する。  
                MLFrameworkId:
                  type: integer  
                  description: |
                    機械学習フレームワークのIDを記載する  
                    名称とIDはGET /mlFrameworksで取得する。
                GuidelineId:
                  type: integer
                  description: |
                    関連するガイドラインIDを記載する。  
                ScopeId:
                  type: integer
                  description: |
                    関連するスコープIDを記載する。  
                GuidelineReason:
                  type: string
                  description: |
                    ガイドラインを選択した理由を記載する。  
                ScopeReason:
                  type: string
                  description: |
                    スコープを選択した理由を記載する。  
            example:
              Name: Fashion Classifier
              Description: Fashion image classification
              ProblemDomain: ImageClassification
              MLFrameworkId: 1
              GuidelineId: 1
              ScopeId: 1
              GuidelineReason: This guideline fits the project.
              ScopeReason: This scope fits the project.
      responses:
        '200':
          description: 追加完了
          content:
            application/json:
              schema:
                required:
                  - Result
                  - MLComponentId
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: string
                      Massage:
                        type: string
                  MLComponentId:
                    type: integer
                example:
                  Result:
                    Code: 'P22000'
                    Message: Success.
                  MLComponentId: 4
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P22001'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P22002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P22003'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P22004'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'


  '/{OrganizerId}/mlComponents/{mlComponentsId}':
    put:
      tags:
        - mlComponents
      summary: 機械学習コンポーネント編集.
      description: |
        機械学習コンポーネントを編集する。  
        ガイドラインを使用中の場合（テストディスクリプション作成済み）、ガイドラインは変更できない。  
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Description:
                  type: string
                ProblemDomain:
                  type: string
                MLFrameworkId:
                  type: integer  
                GuidelineId:
                  type: integer
                ScopeId:
                  type: integer
                  description: |
                    関連するスコープIDを記載する。  
                GuidelineReason:
                  type: string
                  description: |
                    ガイドラインを選択した理由を記載する。  
                ScopeReason:
                  type: string
                  description: |
                    スコープを選択した理由を記載する。  
              example:
                Name: Fashion Classifier
                Description: Fashion image classification
                ProblemDomain: ImageClassification
                MLFrameworkId: 1
                GuidelineId: 1
                ScopeId: 1
                GuidelineReason: This guideline fits the project.
                ScopeReason: This scope fits the project.
      responses:
        '200':
          description: 編集完了
          content:
            application/json:
              schema:
                required:
                  - Result
                  - MLComponentId
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                  MLComponentId:
                    type: integer
                example:
                  Result:
                    Code: 'P00000'
                    Message: Success.
                  MLComponentId: 4
        '400':
          description: >
            リクエストパラメータに問題あり  
            - MLFrameworkIdが存在しない  
            - GuidelineIdが存在しない  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P00400'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P00401'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P00403'
                      Message: Forbidden request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
    delete:
      tags:
        - mlComponents
      summary: 機械学習コンポーネント削除.
      description: |
        機械学習コンポーネント一覧表示から、選択した機械学習コンポーネントを削除する。
        削除する機械学習コンポーネントに関連するインベントリ情報とテストディスクリプション情報を削除する。
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: string
      responses:
        '200':
          description:  削除成功通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P32000'
                  Message: success.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P32001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P32003'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P32004'
                  Message: not found ml_component.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'P39999'
                  Message: internal server error
  '/{OrganizerId}/mlComponents/{mlComponentsId}/report_opinion':
    put:
      tags:
        - mlComponents
      summary: 機械学習コンポーネントにレポート見解を登録.
      description: |
        機械学習コンポーネントにレポート見解を登録する。  
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ReportOpinion:
                  type: string
              example:
                ReportOpinion: All TDs meet the requirements
      responses:
        '200':
          description: 編集完了
          content:
            application/json:
              schema:
                required:
                  - Result
                  - MLComponentId
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                  MLComponentId:
                    type: integer
                example:
                  Result:
                    Code: 'P40000'
                    Message: Success.
                  MLComponentId: 4
        '400':
          description: >
            リクエストパラメータに問題あり  
            - OrganizerIdが存在しない  
            - mlComponentsIdが存在しない  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'P40400'
                      Message: Invalid request parameter.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/mlFrameworks':
    get:
      tags:
        - MLFrameworks
      security: []
      summary: 機械学習フレームワーク一覧取得.
      description: 機械学習フレームワークの一覧を取得する
      responses:
        '200':
          description: 機械学習フレームワーク一覧
          content:
            application/json:
              schema:
                required:
                  - Result
                  - MLFrameworks
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  MLFrameworks:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                example:
                  Result:
                    Code: 'M11000'
                    Message: Success.
                  MLFrameworks:
                    - Id: 1
                      Name: Tensorflow-2.3
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/Inventories':
    get:
      tags:
        - Inventories
      summary: インベントリ一覧取得.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付くインベントリの一覧を取得
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: インベントリ情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Inventories
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Message:
                        type: string
                  Inventories:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                      DataType:
                        type: object
                        properties:
                          Id:
                            type: integer
                          Name:
                            type: string
                      Description:
                        type: string
                      Formats:
                        type: object
                        description: |
                          フォーマット
                        properties:
                          Id:
                            type: integer
                          Name:
                            type: string
                      FilePath:
                        type: string
                      CreationDatetime:
                        type: string
                      UpdateDatetime:
                        type: string
                example:
                  Result:
                    Code: 'I12000'
                    Message: Success.
                  Inventories:
                  - Id: 1
                    Name: TestDataset_0818
                    DataType:
                      Id: 1
                      Name: dataset
                    Description: "1枚の手書き文字データ(28x28, png)のpng"
                    Formats:
                    - Id: 1
                      Name: CSV 
                    - Id: 2
                      Name: PNG 
                    FilePath: /mnt/xxx/1
                    CreationDatetime: '2020-09-28T01:22:03.920542'
                    UpdateDatetime: '2020-09-28T01:22:03.920542'
                  - Id: 2
                    Name: TestDataset_0918
                    DataType:
                      Id: 1
                      Name: dataset
                    Description: 0918用のデータセット
                    Formats:
                    - Id: 1
                      Name: CSV 
                    FilePath: /mnt/xxx/2
                    CreationDatetime: '2020-09-28T01:22:03.920542'
                    UpdateDatetime: '2020-09-28T01:22:03.920542'
                  - Id: 3
                    Name: TrainedModel_0907
                    DataType:
                      Id: 2
                      Name: model
                    Description: 0907用のモデル
                    Formats:
                    - Id: 3
                      Name: H5 
                    FilePath: /mnt/xxx/3
                    CreationDatetime: '2020-09-28T01:22:03.920542'
                    UpdateDatetime: '2020-09-28T01:22:03.920542'
                  - Id: 4
                    Name: TestDataset_1018
                    DataType:
                      Id: 1
                      Name: dataset
                    Description: 1018用のデータセット
                    Formats:
                    - Id: 1
                      Name: CSV 
                    FilePath: /mnt/xxx/4
                    CreationDatetime: '2020-09-28T01:22:03.920542'
                    UpdateDatetime: '2020-09-28T01:22:03.920542'
                  - Id: 5
                    Name: TrainedModel_1007
                    DataType:
                      Id: 2
                      Name: model
                    Destination: 1007用のモデル
                    Formats:
                    - Id: 3
                      Name: H5 
                    FilePath: /mnt/xxx/5
                    CreationDatetime: '2020-09-28T01:22:03.920542'
                    UpdateDatetime: '2020-09-28T01:22:03.920542'
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I12001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I12002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I12003'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    post:
      tags:
        - Inventories
      summary: インベントリ追加.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付くインベントリを追加する
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: インベントリ追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - TypeId
                - FilePath
                - Formats
              properties:
                Name:
                  type: string
                TypeId:
                  type: integer
                  description: dataTypeのIdを指定する。
                FilePath:
                  type: string  
                  description: |
                    インベントリのアドレスを指定する。  
                    TypeがWINDOWS_FILEの場合、以下の条件に当てはまるFilePathのみを許容する。  
                    ・アルファベッドから始まる  
                    ・長さが259バイト以下である  
                    TypeがUNIX_FILE_SYSTEMの場合、以下の条件に当てはまるFilePathのみを許容する。  
                    ・/から始まる  
                    ・長さが1023バイト以下である  
                    ・一つの要素(ディレクトリ名・ファイル名)が255バイト以下である  
                    この条件に当てはまらないFilePathが指定された場合、422を返却する。
                Destination: 
                  type: string
                Formats:
                  type: array
                  description: |
                    インベントリのフォーマットをN個設定する
                    フォーマット一覧取得APIで取得された名前以外を指定した場合、本API内部でフォーマット追加処理をする  
                  items:
                    type: string
            example:
              Name: TestDataset_0818
              TypeId: 1
              FilePath: /mnt/xxx/1
              Destination: 0818用のデータセット
              Formats: ["csv"]
      responses:
        '200':
          description: 登録完了通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I22000'
                  Message: Success.
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I22001'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I22002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I22003'
                      Message: Forbidden request.
        '404':
          description: |
            以下リクエストを受信したときに返却する。
              - 指定した{mlComponentsId}が存在しない
              - FilePathが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I22004'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/InventoriesFront':
    post:
      tags:
        - Inventories
      summary: インベントリ追加（scrfトークンありで使用）.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付くインベントリを追加する（scrfトークンありで使用）.  
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: インベントリ追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - TypeId
                - FilePath
                - Formats
              properties:
                Name:
                  type: string
                TypeId:
                  type: integer
                  description: dataTypeのIdを指定する。
                FilePath:
                  type: string  
                  description: |
                    インベントリのアドレスを指定する。  
                    TypeがWINDOWS_FILEの場合、以下の条件に当てはまるFilePathのみを許容する。  
                    ・アルファベッドから始まる  
                    ・長さが259バイト以下である  
                    TypeがUNIX_FILE_SYSTEMの場合、以下の条件に当てはまるFilePathのみを許容する。  
                    ・/から始まる  
                    ・長さが1023バイト以下である  
                    ・一つの要素(ディレクトリ名・ファイル名)が255バイト以下である  
                    この条件に当てはまらないFilePathが指定された場合、422を返却する。
                Destination: 
                  type: string
                Formats:
                  type: array
                  description: |
                    インベントリのフォーマットをN個設定する
                    フォーマット一覧取得APIで取得された名前以外を指定した場合、本API内部でフォーマット追加処理をする  
                  items:
                    type: string
            example:
              Name: TestDataset_0818
              TypeId: 1
              FilePath: /mnt/xxx/1
              Destination: 0818用のデータセット
              Formats: ["csv"]
      responses:
        '200':
          description: 登録完了通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I22000'
                  Message: Success.
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I22001'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I22002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I22003'
                      Message: Forbidden request.
        '404':
          description: |
            以下リクエストを受信したときに返却する。
              - 指定した{mlComponentsId}が存在しない
              - FilePathが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I22004'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/Inventories/{InventoryId}':
    put:
      tags:
        - Inventories
      summary: インベントリ編集.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付く対象のインベントリIDを指定し、そのインベントリ情報を編集する。
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: inventoryId
          in: path
          description: インベントリId
          required: true
          schema:
            type: integer
      requestBody:
        description: インベントリ追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - TypeId
                - FilePath
                - Formats
              properties:
                Name:
                  type: string
                TypeId:
                  type: integer
                  description: dataTypeのIdを指定する。
                FilePath:
                  type: string 
                  description: |
                    インベントリのアドレスを指定する。  
                    TypeがWINDOWS_FILEの場合、以下の条件に当てはまるFilePathのみを許容する。  
                    ・アルファベッドから始まる  
                    ・長さが259バイト以下である  
                    TypeがUNIX_FILE_SYSTEMの場合、以下の条件に当てはまるFilePathのみを許容する。  
                    ・/から始まる  
                    ・長さが1023バイト以下である  
                    ・一つの要素(ディレクトリ名・ファイル名)が255バイト以下である  
                    この条件に当てはまらないFilePathが指定された場合、422を返却する。
                Destination: 
                  type: string 
                Formats:
                  type: array
                  description: |
                    インベントリのフォーマットをN個設定する
                    フォーマット一覧取得APIで取得された名前以外を指定した場合、本API内部でフォーマット追加処理をする  
                  items:
                    type: string
            example:
              Name: TestDataset_0818
              TypeId: 1
              FilePath: /mnt/xxx/1
              Destination: 0818用のデータセット
              Formats: ["csv"]
      responses:
        '200':
          description: インベントリ編集情報
          content:
            application/json:
              schema:
                required:
                  - Result
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                example:
                  Result:
                    Code: 'I32000'
                    Message: Success.
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I32001'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I32002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I32003'
                      Message: Forbidden request.
        '404':
          description: |
            以下リクエストを受信したときに返却する。
              - 指定した{InventoryId}が存在しない
              - FilePathが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I32004'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    delete:
      tags:
        - Inventories
      summary: インベントリ削除.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付く対象のインベントリIDを指定し、そのインベントリ情報を削除する
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: inventoryId
          in: path
          description: インベントリId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  削除成功通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I42000'
                  Message: success.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I42001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'I42002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I42003'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  '/formats':
    get:
      tags:
        - Format
      security: []
      summary: フォーマット一覧取得.
      description: フォーマットの一覧を取得する
      responses:
        '200':
          description: フォーマット情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Formats
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  Formats:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                example:
                  Result:
                    Code: I72000
                    Message: Success.
                  Tags:
                    - Id: 1
                      Name: png
                    - Id: 2
                      Name: jpg
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I74000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/dataTypes':
    get:
      tags:
        - Data Type
      security: []
      summary: データタイプ一覧取得.
      description: データタイプの一覧を取得する
      responses:
        '200':
          description: データタイプ情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - DataTypes
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  DataTypes:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                        description: |
                          以下のテータタイプを返却する。
                          * dataset
                          * model
                          * attribute set
                example:
                  Result:
                    Code: I82000
                    Message: Success.
                  DataTypes:
                    - Id: 1
                      Name: dataset
                    - Id: 2
                      Name: model
                    - Id: 3
                      Name: attribute set
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  '/tags':
    get:
      tags:
        - Tag
      security: []
      summary: (使用機能なし)タグ一覧取得.
      description: タグの一覧を取得する
      responses:
        '200':
          description: タグ情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Tags
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  Tags:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Type:
                        type: string
                        description: |
                          * INVENTORY : インベントリに使用可能なタグ
                      Name:
                        type: string
                example:
                  Result:
                    Code: I62000
                    Message: Success.
                  Tags:
                    - Id: 1
                      Type: INVENTORY
                      Name: CSV 
                    - Id: 2
                      Type: INVENTORY
                      Name: TF_MODEL
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I64000'
                  Message: not found page.
        '422':
          description:  不正リクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'I60000'
                  Message: bad request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/QualityMeasurements':
    get:
      tags:
        - Quality_Measurement
      security: []
      summary: 測定基準一覧取得.
      description: 測定基準の一覧を取得する
      responses:
        '200':
          description: |
            測定基準情報を取得する.
            * レスポンスの `QualityMeasurements.properties.Min` と 
              `QualityMeasurements.properties.Max` は未定義の場合nullが返される.
          content:
            application/json:
              schema:
                required:
                  - Result
                  - QualityMeasurements
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  QualityMeasurements:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                      Description:
                        type: string
                      QualityDimensionId:
                        type: integer
                      Type:
                        type: string
                      Min:
                        type: number
                      Max:
                        type: number
                      Structure:
                        type: string
                example:
                  Result:
                    Code: 'Q22000'
                    Message: Success.
                  QualityMeasurements:
                    - Id: 1
                      Name: 学習モデルの精度計測 
                      Description: 学習モデルの正確性評価指標 
                      QualityDimensionId: 5
                      Type: "float"
                      Min: 0.0
                      Max: null
                      Structure: "single"
                    - Id: 2
                      Name: 学習モデルの敵対的サンプル安定性計測
                      Description: 学習モデルの安定性評価指標 
                      QualityDimensionId: 6
                      Type: "float"
                      Min: null
                      Max: 1.0
                      Structure: "single"
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q24000'
                  Message: not found page.
        '422':
          description:  不正リクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q20000'
                  Message: bad request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    post:
      tags:
        - Quality_Measurement
      security: []
      summary: (使用禁止→AIT追加APIで実施)測定基準追加.
      description: |
        * 測定基準を追加する。  
        * 測定基準はプリミティブな一つのメトリクス（指標値）をもつ。  
        * この測定基準設計者が、どういった基準で算出するかをDescription項目で明確化しなければならない。  
        * 名称とバージョンの組み合わせが既に存在する場合、400を返却する。  
        * 存在しない内部品質特性IDを指定した場合、400を返却する。  
      requestBody:
        description: 測定基準追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - Version
                - Description
                - QualityDimensionId
                - OperandTemplates
              properties:
                Name:
                  type: string
                Version:
                  type: string
                Description:
                  type: string
                QualityDimensionId:
                  type: integer
                OperandTemplates:
                  type: object
                  properties:
                    Name:
                      type: string
                    Unit:
                      type: string
            example:
              - Name: 分類問題における学習モデルACC計測 
                Version: 0.1
                Description: | 
                  * 評価物：学習済モデル  
                  * 対象領域：分類問題  
                  * メトリクス：  
                    * ACC = (TP+TF) / (TP+FP+TN+FN)  
                QualityDimensionId: 5
                OperandTemplates: 
                  - Name: ACC
                    Unit: "%"
      responses:
        '200':
          description: 追加正常終了
          content:
            application/json:
              schema:
                required:
                  - Result
                  - QualityMeasurementId
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  QualityMeasurementId:
                    type: integer
              example:
                Result:
                  Code: 'Q23000'
                  Message: Success.
                QualityMeasurementId: 100
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
              - BadRequest
              - Name-Versionの組み合わせが既に存在する
              - 存在しない内部品質特性IDを指定した
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q23010'
                  Message: invalid request.
        '500':
          description: |
            サーバでの処理失敗
            - SQLAlChemyError
            - その他例外
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/QualityMeasurements/RelationalOperators':
    get:
      tags:
        - Quality_Measurement
      security: []
      summary: 関係演算子取得.
      description: 関係演算子の一覧を取得する
      responses:
        '200':
          description: 関係演算子情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - RelationalOperators
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  RelationalOperators:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Expression:
                        type: string
                      Description:
                        type: string
                example:
                  Result:
                    Code: 'Q32000'
                    Message: Success.
                  RelationalOperators:
                    - Id: 1
                      Expression: '==' 
                      Description: 値が等しければTrue
                    - Id: 2
                      Expression: '!=' 
                      Description: 値が等しくなければtrue
                    - Id: 3
                      Expression: '>' 
                      Description: 値が大きければtrue
                    - Id: 4
                      Expression: '<' 
                      Description: 値が小さければtrue
                    - Id: 5
                      Expression: '>=' 
                      Description: 値が同じか大きければtrue
                    - Id: 6
                      Expression: '<=' 
                      Description: 値が同じが小さければtrue
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q34000'
                  Message: not found page.
        '422':
          description:  不正リクエスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q30000'
                  Message: bad request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/testRunners':
    get:
      tags:
        - AIT
      security: []
      summary: インストールしたtestRunner(AIT)AITの一覧取得.
      description: |
        インストールしたtestRunner(AIT)の一覧を取得する.  
        MlComponentとは関連しない.  
        0件もありえる.  
      responses:
        '200':
          description: AIT情報
          content:
            application/json:
              schema:
                required:
                  - Result
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  AITDetail:
                    $ref: '#/components/schemas/AITDetailList'
              example:
                Result:
                  Code: 'A00000'
                AITDetail:
                  $ref: '#/components/schemas/AITDetailList'
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  '/testRunners/{testRunnerId}':
    delete:
      tags:
        - AIT
      summary: 指定されたTestRunner(AIT)をアンインストールする.
      description: |
        指定されたTestRunner(AIT)をアンインストールする.  
        全てのMlComponentのTestDescriotionで使用中のTestRunner(AIT)はアンインストールしない.  
        アンインストールの処理は、delete_flagをtrueにする.  
      parameters:
        - name: testRunnerId
          in: path
          description: TestRunner(AIT)のId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  アンインストール成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'A02000'
                  Message: success.
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する.  
              - TDで使用中のAITを指定された.  
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'A02400'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'A02401'
                      Message: Unauthorized request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'A02404'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/testRunners/{testRunnerId}/usingTD':
    get:
      tags:
        - AIT
      security: []
      summary: 指定されたtestRunner(AIT)を使用しているTestDescriptionIDとMlComponentIDを取得する.  
      description: |
        指定されたtestRunner(AIT)を使用しているTestDescriptionIDとMlComponentIDを取得する.  
        全てのMlComponentのTestDescriptionが対象.  
        0件もありえる.  
      parameters:
        - in: path
          name: id
          description: TestRunner(AIT)のId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 正常終了
          content:
            application/json:
              schema:
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  UsingTD:
                    description: 指定されたtestRunner(AIT)を使用しているTestDescriptionID、TestRunnerId、MlComponentID
                    type: array
                    items:
                      type: object
                      properties:
                        TestDescriptionID:
                          type: integer
                        TestRunnerId:
                          type: integer
                        MlComponentID:
                          type: integer
              example:
                Result:
                  Code: 'A03000'
                  Message: success.
                UsingTD:
                  - TestDescriptionID: 1
                    TestRunnerId: 5
                    MlComponentID: 1
                  - TestDescriptionID: 2
                    TestRunnerId: 5
                    MlComponentID: 1
                  - TestDescriptionID: 10
                    TestRunnerId: 5
                    MlComponentID: 2
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  '/ait_local':
    get:
      tags:
        - AIT_Local
      security: []
      summary: ローカルレジストリにインストールしたAITの一覧取得.
      description: |
        ローカルレジストリにインストールしたAITの一覧を取得する.  
        MlComponentとは関連しない.  
        0件もありえる.  
      responses:
        '200':
          description: AIT情報
          content:
            application/json:
              schema:
                required:
                  - Result
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  AITLocalList:
                    type: array
                    description: AIT_Local_List
                    properties:
                      ait_id:
                        type: integer
                      name:
                        type: string
                      version:
                        type: string
                      description:
                        type: string
                      create_user_account:
                        type: string
                      create_user_name:
                        type: string
                      status: 
                        type: string
                        description: ローカルレジストリにおけるAITのステータス（登録／提供状態）
                        enum:
                          - registration in progress
                          - registration failed
                          - OK

              example:
                Result:
                  Code: 'AL0000'
                AITLocalList:
                  -
                    ait_id: 1
                    name: eval_mnist_acc_tf2.3
                    version: 0.1
                    description: >
                      Only Sequential API Model
                      Accuracy = TP+TNTP+FP+FN+TN
                    create_user_account: airc_developerA
                    create_user_name: 開発者A
                    status: registration in progress
                  -
                    ait_id: 2
                    name: dummy_AIT_2
                    version: 0.1
                    description: >
                      dummy_AIT_description_2
                    create_user_account: airc_developerB
                    create_user_name: 開発者B
                    status: OK
                  -
                    ait_id: 3
                    name: dummy_AIT_3
                    version: 0.1
                    description: >
                      dummy_AIT_description_3
                    create_user_account: airc_developerC
                    create_user_name: 開発者C
                    status: OK
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriotions/runners':
    post:
      tags:
        - Test descriotions
      summary: テスト実行.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付くテスト機能を実行する。※非同期処理
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: 非同期処理コマンド
        content:
          application/json:
            schema:
              required:
                - Command
                - TestDescriptionIds
              properties:
                Command:
                  type: string
                TestDescriptionIds:
                  type: array
                  description: |
                    - コマンドの反映先となるtestDescriptionIDを指定する。  
                    - 複数のtestDescriptionIDを指定可能とする。  
                    - すべてのtestDescriptionに対して実施したい場合は、空を指定する。  
                  items:
                    type: integer
            example:
              Command: AsyncStart
              TestDescriptionIds: [1, 2]
      responses:
        '200':
          description: テスト実行要求受付日時
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Job
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  Job:
                    type: object
                    properties:
                      Id:
                        type: integer
                      StartDateTime:
                        type: string
                example:
                  Result:
                    Code: 'R12000'
                    Message: Success.
                  Job:
                    Id: 1
                    StartDateTime: '2019-10-25 15:00:00T+0900'
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'R18000'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R12001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R12002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'R14000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriotions/runnersFront':
    post:
      tags:
        - Test descriotions
      summary: テスト実行（scrfトークンありで使用）.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付くテスト機能を実行する。※非同期処理（scrfトークンありで使用）  
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: 非同期処理コマンド
        content:
          application/json:
            schema:
              required:
                - Command
                - TestDescriptionIds
              properties:
                Command:
                  type: string
                TestDescriptionIds:
                  type: array
                  description: |
                    - コマンドの反映先となるtestDescriptionIDを指定する。  
                    - 複数のtestDescriptionIDを指定可能とする。  
                    - すべてのtestDescriptionに対して実施したい場合は、空を指定する。  
                  items:
                    type: integer
            example:
              Command: AsyncStart
              TestDescriptionIds: [1, 2]
      responses:
        '200':
          description: テスト実行要求受付日時
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Job
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  Job:
                    type: object
                    properties:
                      Id:
                        type: integer
                      StartDateTime:
                        type: string
                example:
                  Result:
                    Code: 'R12000'
                    Message: Success.
                  Job:
                    Id: 1
                    StartDateTime: '2019-10-25 15:00:00T+0900'
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'R18000'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R12001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R12002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'R14000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriotions/run-status':
    get:
      tags:
        - Test descriotions
      summary: テスト実行ジョブのステータスと結果取得.
      description: 実行指示した各job(test description)のステータス・結果を取得する
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: テスト実行ジョブのステータスと結果
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Job
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  Job:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Status:
                        type: string
                        description: |
                          以下のステータスを定義する  
                          この状態は各runのマージした内容となる  
                            * QUEUED : すべてのrunがQUEUED
                            * RUNNING : すべてのrunで、1件でもRUNNINGがある場合(優先レベル2)
                            * DONE : すべてのrunがDONE
                            * CANCELLING : すべてのrunで、1件でもCANCELLINGがある場合(優先レベル1→最優先)  
                              α版では実装範囲外
                            * CANCELLED : すべてのrunがCANCELLED  
                              α版では実装範囲外
                      Result:
                        type: string
                        description: |
                          以下の結果を定義する  
                          この状態は各runのマージした内容となる  
                            * OK : すべてのrunがOK
                            * NG : すべてのrunで、1件でもNGがある場合(優先レベル2)
                            * ERR : すべてのrunで、1件でもERRがある場合(優先レベル1→最優先)
                            * NA : すべてのrunで、1件でもNAがある場合(優先レベル3)
                      ResultDetail:
                        type: string
                        description: |
                          実行runのOK、NG、ERR、NAのそれぞれ件数内訳を返却する  
                          "OK:XX NG:XX ERR:XX NA:XX"
                      Runs:
                        type: object
                        properties:
                          Id:
                            type: integer
                          TestDescriptionID:
                            type: integer
                          Status:
                            type: string
                            description: |
                              以下のステータスを定義する  
                                * NA : 未実行
                                * QUEUED : 実行キューに登録済み
                                * RUNNING : 実行中
                                * DONE : 実行完了
                                * CANCELLING : キャンセル指示済み  
                                  α版では実装範囲外
                                * CANCELLED : キャンセル済み  
                                  α版では実装範囲外
                          Result:
                            type: string
                            description: |
                              以下の結果を定義する  
                                * OK : テスト指標達成
                                * NG : テスト指標未達成
                                * ERR : テスト実行でエラー発生
                                * NA : テスト未実施
                          ResultDetail:
                            type: string
                            description: |
                              以下の詳細結果を定義する  
                example:
                  Result:
                    Code: 'R22000'
                    Message: Success.
                  Job:
                    Id: 1
                    Status: 'RUNNING'
                    Result: 'NA'
                    ResultDetail: 'OK:1 NG:0 ERR:0 NA:1'
                  Runs:
                    - Id: 1
                      TestDescriptionID: 1
                      Status: 'DONE'
                      Result: 'OK'
                      ResultDetail: 'OK'
                    - Id: 2
                      TestDescriptionID: 2
                      Status: 'RUNNING'
                      Result: 'NA'
                      ResultDetail: 'NA'
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R22001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R22002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'R24000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptions':
    get:
      tags:
        - Test descriotions
      summary: テストディスクリプション一覧表示.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付くテストディスクリプション一覧を取得し、テストディスクリプション一覧を表示
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: テストディスクリプション情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Test
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  Test:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Status:
                        type: string
                      Result:
                        type: string
                      ResultDetail:
                        type: string
                      TestDescriptions:
                        type: array
                        items:
                          type: object
                          properties:
                            Id:
                              type: integer
                            ParentID:
                              type: integer
                              description: |
                                親TestDescriptionIDを返却する。  
                                親がいない場合、この項目は存在しない。  
                            Name:
                              type: string
                            Result:
                              type: string
                            ResultDetail:
                              type: string
                            CreationDatetime:
                              description: 該当のテストデスクリプションが作成されたシステム日時を返却します
                              type: string
                            UpdateDatetime:
                              type: string
                            TargetInventories:
                              type: array
                              description: |
                                このTestDescriptionが対象とするインベントリ情報リストを返却する。  
                              items:
                                type: object
                                properties:
                                  Id:
                                    type: integer
                                  Name:
                                    type: string
                                  TemplateInventoryId:
                                    type: integer
                                    description: |
                                      テンプレートになるターゲットインベントリIDを返却する。  
                            Opinion:
                              type: string
                              description: |
                                このTestDescriptionの見解を返却する。未設定の場合、空文字で返却する。  
                            Star:
                              type: boolean
                              description: |
                                このTestDescriptionがお気に入りに指定されているかどうかを真偽値で返却する。  
                            TestRunnerId:
                              type: integer
                              description: |
                                TestDescriptionの元になったテストランナー（AIT）のIDを返却する。
                example:
                  Result:
                    Code: 'T12000'
                    Message: Success.
                  Test:
                    Id: 1
                    Status: DONE
                    Result: NG
                    ResultDetail: OK 2 / NG 1 / NA 1
                    TestDescriptions:
                      - Id: 1
                        Name: NeuronCoverage
                        Result: OK
                        CreationDatetime: "2020-09-28T01:22:03.920542"
                        UpdateDatetime: "2020-09-28T01:22:03.920542"
                        TargetInventories: [
                          {
                            "Id": 1,
                            "Name": "TestDataset_1001",
                            "TemplateInventoryId": 1
                          }
                        ]
                        Opinion: "ニューロンカバレージが規定のXX%以上であり、品質に問題なしと判断した。"
                        Star: true
                        TestRunnerId: 11
                      - Id: 2
                        Name: MetamorphicTesting
                        Result: OK
                        ResultDetail: OK
                        CreationDatetime: "2020-09-28T01:22:03.920542"
                        UpdateDatetime: "2020-09-28T01:22:03.920542"
                        TargetInventories: [
                          {
                            "Id": 2,
                            "Name": "TestDataset_1005",
                            "TemplateInventoryId": 2
                          },
                          {
                            "Id": 3,
                            "Name": "TrainedModel_1005",
                            "TemplateInventoryId": 3
                          }
                        ]
                        Opinion: ""
                        Star: false
                        TestRunnerId: 12
                      - Id: 3
                        Name: AttributeCoverage
                        Result: NG
                        ResultDetail: AttributeCoverage is not enough
                        CreationDatetime: "2020-09-28T01:22:03.920542"
                        UpdateDatetime: "2020-09-28T01:22:03.920542"
                        TargetInventories: [
                          {
                            "Id": 2,
                            "Name": "TestDataset_1005",
                            "TemplateInventoryId": 4
                          }
                        ]
                        Opinion: ""
                        Star: false
                        TestRunnerId: 13
                      - Id: 4
                        ParentID: 3
                        Name: AttributeCoverage
                        Result: NA
                        ResultDetail: NA
                        CreationDatetime: "2020-09-28T01:22:03.920542"
                        UpdateDatetime: "2020-09-28T01:22:03.920542"
                        TargetInventories: [
                          {
                            "Id": 4,
                            "Name": "TestDataset_1018",
                            "TemplateInventoryId": 5
                          },
                          {
                            "Id": 5,
                            "Name": "TrainedModel_1007",
                            "TemplateInventoryId": 6
                          }
                        ]
                        Opinion: ""
                        Star: false
                        TestRunnerId: 14
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T12001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T12002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T14000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    post:
      tags:
        - Test descriotions
      summary: テストディスクリプション追加
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付くテストディスクリプション詳細情報を追加する
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: テストディスクリプション詳細追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - QualityDimensionID
                - QualityMeasurements
                - TargetInventories
                - TestRunner
              properties:
                Name:
                  type: string
                QualityDimensionID:
                  type: integer
                  description: |
                    内部品質プロパティIDを指定する。  
                    存在しない内部品質プロパティIDを指定した場合、422を返却する。  
                ParentID:
                  type: integer
                  description: |
                    親(コピー元)のTestDescriptionIDを指定する。  
                    コピーではなく、新規作成の場合は指定しない。  
                    存在しないTestDescriptionIDを指定した場合、422を返却する。  
                QualityMeasurements:
                  type: object
                  properties:
                    Id:
                      type: integer
                      description: |
                        メジャーメントのIDを指定する。
                    Value:
                      type: string
                    RelationalOperatorId:
                      type: integer
                    Enable:
                      type: boolean
                      description: |
                        trueの場合このMeasurementを使用する。  
                        falseの場合は使用しない。  
                        trueの場合はValue、RelationalOperatorIdが共に設定されていることが前提。  
                        上記が未設定の場合、400を返却する。
                TargetInventories:
                  type: array
                  items:
                    properties:
                      Id:
                        type: integer
                      InventoryId:
                        type: integer
                      TemplateInventoryId:
                        type: integer
                        description: |
                          テンプレートになるターゲットインベントリIDを指定する。  
                          値はGET testrunner で返却されたTargetInventoryのIDを指定する。  
                TestRunner:
                  type: object
                  properties:
                    Id:
                      type: integer
                      description: |
                        テストランナーのIDを指定する。
                    Params:
                      type: object
                      properties:
                        TestRunnerParamTemplateId:
                          type: integer
                          description: |
                            テストランナーのパラメータIDを指定する。
                        Value:
                          type: string
            example:
              Name: Neuron Coverage
              ParentID: 10
              QualityDimensionID: 1
              QualityMeasurements:
                Id: 1
                Value: "60"
                RelationalOperatorId: 1
                Enable: true
              TargetInventories:
                - Id: 1
                  InventoryId: 5
                  TemplateInventoryId: 1
                - Id: 2
                  InventoryId: 4
                  TemplateInventoryId: 2
              TestRunner:
                Id: 1
                Params:
                  - TestRunnerParamTemplateId: 1
                    Value: "0.5"
                  - TestRunnerParamTemplateId: 2
                    Value: "0.3"
                  - TestRunnerParamTemplateId: 3
                    Value: "1.0"
      responses:
        '200':
          description: 登録完了通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T22000'
                  Message: Success.
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T28000'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T22002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T22003'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T24000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptionsFront':
    post:
      tags:
        - Test descriotions
      summary: テストディスクリプション追加（scrfトークンありで使用）
      description: |
        選択した機械学習コンポーネントとログインユーザの組織に紐付くテストディスクリプション詳細情報を追加する.  
        （scrfトークンありで使用）  
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: テストディスクリプション詳細追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - QualityDimensionID
                - QualityMeasurements
                - TargetInventories
                - TestRunner
              properties:
                Name:
                  type: string
                QualityDimensionID:
                  type: integer
                  description: |
                    内部品質プロパティIDを指定する。  
                    存在しない内部品質プロパティIDを指定した場合、422を返却する。  
                ParentID:
                  type: integer
                  description: |
                    親(コピー元)のTestDescriptionIDを指定する。  
                    コピーではなく、新規作成の場合は指定しない。  
                    存在しないTestDescriptionIDを指定した場合、422を返却する。  
                QualityMeasurements:
                  type: object
                  properties:
                    Id:
                      type: integer
                      description: |
                        メジャーメントのIDを指定する。
                    Value:
                      type: string
                    RelationalOperatorId:
                      type: integer
                    Enable:
                      type: boolean
                      description: |
                        trueの場合このMeasurementを使用する。  
                        falseの場合は使用しない。  
                        trueの場合はValue、RelationalOperatorIdが共に設定されていることが前提。  
                        上記が未設定の場合、400を返却する。
                TargetInventories:
                  type: array
                  items:
                    properties:
                      Id:
                        type: integer
                      InventoryId:
                        type: integer
                      TemplateInventoryId:
                        type: integer
                        description: |
                          テンプレートになるターゲットインベントリIDを指定する。  
                          値はGET testrunner で返却されたTargetInventoryのIDを指定する。  
                TestRunner:
                  type: object
                  properties:
                    Id:
                      type: integer
                      description: |
                        テストランナーのIDを指定する。
                    Params:
                      type: object
                      properties:
                        TestRunnerParamTemplateId:
                          type: integer
                          description: |
                            テストランナーのパラメータIDを指定する。
                        Value:
                          type: string
            example:
              Name: Neuron Coverage
              ParentID: 10
              QualityDimensionID: 1
              QualityMeasurements:
                Id: 1
                Value: "60"
                RelationalOperatorId: 1
                Enable: true
              TargetInventories:
                - Id: 1
                  InventoryId: 5
                  TemplateInventoryId: 1
                - Id: 2
                  InventoryId: 4
                  TemplateInventoryId: 2
              TestRunner:
                Id: 1
                Params:
                  - TestRunnerParamTemplateId: 1
                    Value: "0.5"
                  - TestRunnerParamTemplateId: 2
                    Value: "0.3"
                  - TestRunnerParamTemplateId: 3
                    Value: "1.0"
      responses:
        '200':
          description: 登録完了通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T22000'
                  Message: Success.
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T28000'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T22002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T22003'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T24000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptions/{testTestDescriptionsId}':
    get:
      tags:
        - Test descriotions
      summary: テストディスクリプション詳細表示.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付く対象のテストディスクリプションIDを指定し、そのテストディスクリプションの詳細情報を取得
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: testTestDescriptionsId
          in: path
          description: テストディスクリプションId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: テストディスクリプションの詳細情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - TestDescriptionDetail
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  TestDescriptionDetail:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                      ParentID:
                        type: integer
                        description: |
                          親TestDescriptionIDを返却する。  
                          親がいない場合、この項目は存在しない。  
                      QualityDimension:
                        type: object
                        properties:
                          Id:
                            type: integer
                          Name:
                            type: string
                      Opinion:
                        type: string
                      QualityMeasurements:
                        type: array
                        properties:
                          Id:
                            type: integer
                          Name:
                            type: string
                          Description:
                            type: string
                          Structure:
                            type: string
                          Value:
                            type: number
                          RelationalOperatorId:
                            type: integer
                          Enable:
                            type: boolean
                            description: |
                              trueの場合このMeasurementを使用する。  
                              falseの場合は使用しない。  
                              trueの場合はValue、RelationalOperatorIdが共に設定されていることが前提。
                          RunMeasureValue:
                            type: number
                            description: 実行時にMeasureの値
                      TargetInventories:
                        type: array
                        items:
                          type: object
                          properties:
                            Id:
                              type: integer
                            TemplateInventoryId:
                              type: integer
                              description: |
                                テンプレートになるターゲットインベントリIDを返却する。  
                            TemplateInventoryName:
                              type: string
                              description: |
                                テンプレートになるターゲットインベントリ名を返却する。  
                            Name:
                              type: string
                            Type:
                              type: string
                            Description:
                              type: string
                            FilePath:
                              type: string
                              description: |
                                インベントリのファイルパスを返却する。  
                      TestRunner:
                        type: object
                        properties:
                          Id:
                            type: integer
                          Name:
                            type: string
                          Description:
                            type: string
                          Version:
                            type: string
                          CreateUserAccount:
                            type: string
                          CreateUserName:
                            type: string
                          Quality:
                            type: string
                          LandingPage:
                            type: string
                          params:
                            type: array
                            items:
                              type: object
                              properties:
                                Id:
                                  type: integer
                                Name:
                                  type: string
                                Value:
                                  type: string
                                Description:
                                  type: string
                      TestDescriptionResult:
                        type: object
                        properties:
                          Summary:
                            type: string
                          Datail:
                            type: string
                          ErrorCode:
                            type: string
                            description: |
                              エラーコードを返却する。  
                              エラーが発生していない場合、この項目は存在しない。  
                                * E101:パラメータ定義不正  
                                * E102:インベントリ、パラメータ不正  
                                * E201:AIT実行前エラー  
                                * E901:処理エラー  
                                * E998:IF不整合(プログラム不良)  
                                * E999:メモリ不足などのシステムエラー  
                          LogFile:
                            type: string
                          Graphs:
                            type: array
                            items:
                              type: object
                              properties:
                                Id:
                                  type: integer
                                Name:
                                  type: string
                                FileName:
                                  type: string
                                Description:
                                  type: string
                                GraphType:
                                  type: string
                                ReportRequired:
                                  type: boolean
                                ReportIndex:
                                  type: string
                                ReportName:
                                  type: string
                                Graph:
                                  type: string
                          Downloads:
                            type: array
                            items:
                              type: object
                              properties:
                                Id:
                                  type: integer
                                Name:
                                  type: string
                                FileName:
                                  type: string
                                Description:
                                  type: string
                                DownloadURL:
                                  type: string
                          CreationDatetime:
                            description: 該当のテストデスクリプションが作成されたシステム日時を返却します
                            type: string
                          UpdateDatetime:
                            type: string
                          Star:
                            type: boolean
                            description: |
                              このTestDescriptionがお気に入りに指定されているかどうかを真偽値で返却する。  
                example:
                  Result:
                    Code: 'T32000'
                    Message: Success.
                  TestDescriptionDetail:
                    Id: 1
                    Name: NeuronCoverage
                    ParentID: 3
                    QualityDimension:
                      id: 5
                      Name: 学習の安定性
                    Opinion: 見解
                    QualityMeasurements:
                      - id: 1
                        Name: 学習モデルの敵対的サンプル安定性計測
                        Value: 0.8
                        Description: 学習モデルの安定性評価指標
                        Structure: single
                        RelationalOperatorId: 1
                        Enable: true
                        MeasureValue: 0.56
                    TargetInventories:
                      - Id: 4
                        Name: TestDataset_1018
                        TemplateInventoryId: 1
                        TemplateInventoryName: TestDataset
                        Type: "dataset"
                        Description: "1枚の手書き文字データ(28x28, png)のpng"
                        FilePath: "C:\\test\\train-images-idx3-ubyte.gz"
                      - Id: 5
                        Name: TrainedModel_1007
                        TemplateInventoryId: 2
                        TemplateInventoryName: TrainedModel
                        Type: "model"
                        Description: "学習モデル"
                        FilePath: "C:\\test\\model_mnist_2d.h5"
                    TestRunner:
                      id: 1
                      Name: neuron_coverage_v3.py
                      Description: "* データ入力形式: XXX\n* MLエンジン: tensorflow-vX.X\n* 出力: XXX\n"
                      CreateUserAccount: "airc_developer"
                      CreateUserName: "airc開発者"
                      Version: "1"
                      Quality: "https://airc.aist.go.jp/aiqm/quality/internal/要求分析の十分性"
                      LandingPage: "https://github.com/AITName/AITVersion"
                      Params:
                        - Id: 1
                          Name: Threshold
                          Description: "Threshold"
                          Value: "0.5"
                        - Id: 2
                          Name: Lower Limit
                          Description: "Lower Limit"
                          Value: "0.3"
                        - Id: 3
                          Name: Upper Limit
                          Description: "Upper Limit"
                          Value: "1,0"
                    TestDescriptionResult:
                      Summary: OK
                      Detail: Current Coverage 85%
                      LogFile: 'http://XXX'
                      Graphs:
                        - Id: 1
                          GraphType: "picture"
                          Name: "distribution_graph"
                          FileName: "distribution_graph_a.png"
                          Description: "分布"
                          ReportRequired: False
                          ReportIndex: 1
                          ReportName: "distribution_graph"
                          Graph: 'http://XXX'
                        - Id: 2
                          GraphType: "picture"
                          Name: "distribution_graph"
                          FileName: "distribution_graph_b.png"
                          Description: "分布"
                          ReportRequired: False
                          ReportIndex: 2
                          ReportName: "distribution_graph"
                          Graph: 'http://XXX'
                        - Id: 3
                          GraphType: "picture"
                          Name: "distribution_graph"
                          FileName: "distribution_graph_c.png"
                          Description: "分布"
                          ReportRequired: False
                          ReportIndex: 3
                          ReportName: "distribution_graph"
                          Graph: 'http://XXX'
                      Downloads:
                        - Id: 1
                          Name: "log"
                          FileName: "log.txt"
                          Description: "one image"
                          DownloadURL: 'http://XXX'
                      CreationDatetime: "2020-09-28T01:22:03.920542"
                      UpdateDatetime: "2020-09-28T01:22:03.920542"
                      Star: true
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T32001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T32002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T34000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    delete:
      tags:
        - Test descriotions
      summary: テストディスクリプション詳細削除.
      description: |
        選択した機械学習コンポーネントとログインユーザの組織に紐付く対象のテストディスクリプションIDを指定し、そのテストディスクリプションの詳細情報を削除する
        指定したテストディスクリプションに子供がいる場合、子供も再帰的に削除する
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: testTestDescriptionsId
          in: path
          description: テストディスクリプションId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description:  削除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T52000'
                  Message: success.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T52001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T52002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T54000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
    put:
      tags:
        - Test descriotions
      summary: テストディスクリプション詳細編集.
      description: 選択した機械学習コンポーネントとログインユーザの組織に紐付く対象のテストディスクリプションIDを指定し、そのテストディスクリプションの詳細情報を編集する。ただし、更新対象がテスト実行済み、かつ結果が成功の場合は編集不可とする。
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: testTestDescriptionsId
          in: path
          description: テストディスクリプションId
          required: true
          schema:
            type: integer
      requestBody:
        description: テストディスクリプション詳細追加情報
        content:
          application/json:
            schema:
              required:
                - Name
                - QualityDimensionID
                - QualityMeasurements
                - TargetInventories
                - TestRunner
              properties:
                Name:
                  type: string
                QualityDimensionID:
                  type: integer
                  description: |
                    内部品質プロパティIDを指定する。  
                    存在しない内部品質プロパティIDを指定した場合、422を返却する。
                QualityMeasurements:
                  type: object
                  properties:
                    Id:
                      type: integer
                    Value:
                      type: string
                    RelationalOperatorId:
                      type: integer
                    Enable:
                      type: boolean
                      description: |
                        trueの場合このMeasurementを使用する。  
                        falseの場合は使用しない。  
                        trueの場合はValue、RelationalOperatorIdが共に設定されていることが前提。  
                        上記が未設定の場合、400を返却する。
                TargetInventories:
                  type: array
                  items:
                    properties:
                      Id:
                        type: integer
                      InventoryId:
                        type: integer
                      TemplateInventoryId:
                        type: integer
                        description: |
                          テンプレートになるターゲットインベントリIDを設定する。  
                TestRunner:
                  type: object
                  properties:
                    Id:
                      type: integer
                    Params:
                      type: object
                      properties:
                        TestRunnerParamTemplateId:
                          type: integer
                        Value:
                          type: string
            example:
              Name: Neuron Coverage
              QualityDimensionID: 1
              QualityMeasurements:
                Id: 1
                Value: "60"
                RelationalOperatorId: 1
                Enable: true
              TargetInventories:
                - Id: 1
                  InventoryId: 5
                  TemplateInventoryId: 1
                - Id: 2
                  InventoryId: 4
                  TemplateInventoryId: 1
              TestRunner:
                Id: 1
                Params:
                  - TestRunnerParamTemplateId: 1
                    Value: "0.5"
                  - TestRunnerParamTemplateId: 2
                    Value: "0.3"
                  - TestRunnerParamTemplateId: 3
                    Value: "1.0"
      responses:
        '200':
          description: テストディスクリプションの詳細情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Job
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                example:
                  Result:
                    Code: 'T42000'
                    Message: Success.
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T48000'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T42001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T42002'
                      Message: Forbidden request.
        '404':
          description:  更新対象のテスト実行済み、かつ結果が成功の場合のエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T44000'
                  Message: Cannot be edited if the test has been executed and the result is successful.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptions/{testTestDescriptionsId}/star':
    post:
      tags:
        - Test descriotions
      summary: お気に入り設定
      description: 指定したテストディスクリプションをお気に入りに設定する
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: testTestDescriptionsId
          in: path
          description: テストディスクリプションId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 設定
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T62000'
                  Message: Success.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T62001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T62002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T64000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptions/{testTestDescriptionsId}/unstar':
    post:
      tags:
        - Test descriotions
      summary: お気に入り設定解除
      description: 指定したテストディスクリプションをお気に入りから外す
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: testTestDescriptionsId
          in: path
          description: テストディスクリプションId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 設定
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T72000'
                  Message: Success.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T72001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T72002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T74000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptions/{testTestDescriptionsId}/ancestors':
    get:
      tags:
        - Test descriotions
      summary: 祖先テストディスクリプション一覧表示.
      description: |
        該当するテストディスクリプションの祖先リストを昇順（親→子）の順序で返却する。
        返却するリストの最後尾には該当テストディスクリプションが付加される。
        そのため、親のいないテストディスクリプションを指定した場合、
        該当テストディスクリプション1つだけが返却される。
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
        - name: testTestDescriptionsId
          in: path
          description: テストディスクリプションId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: テストディスクリプション情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - TestDescriptions
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  TestDescriptions:
                    type: array
                    items:
                      type: object
                      properties:
                        Id:
                          type: integer
                        ParentID:
                          type: integer
                          description: |
                            親TestDescriptionIDを返却する。  
                            親がいない場合、この項目は存在しない。  
                        Name:
                          type: string
                        Result:
                          type: string
                        ResultDetail:
                          type: string
                        CreationDatetime:
                          description: 該当のテストデスクリプションが作成されたシステム日時を返却します
                          type: string
                        UpdateDatetime:
                          type: string
                        TargetInventories:
                          type: array
                          description: |
                            このTestDescriptionが対象とするインベントリ情報リストを返却する。  
                          items:
                            type: object
                            properties:
                              Id:
                                type: integer
                              Name:
                                type: string
                              TemplateInventoryId:
                                type: integer
                                description: |
                                  テンプレートになるターゲットインベントリIDを返却する。  
                        Opinion:
                          type: string
                          description: |
                            このTestDescriptionの見解を返却する。未設定の場合、空文字で返却する。  
                        Star:
                          type: boolean
                          description: |
                            このTestDescriptionがお気に入りに指定されているかどうかを真偽値で返却する。  
                        TestRunnerId:
                          type: integer
                          description: |
                            TestDescriptionの元になったテストランナー（AIT）のIDを返却する。
                example:
                  Result:
                    Code: 'T82000'
                    Message: Success.
                  TestDescriptions:
                    - Id: 1
                      Name: NeuronCoverage
                      Result: OK
                      CreationDatetime: "2020-09-28T01:22:03.920542"
                      UpdateDatetime: "2020-09-28T01:22:03.920542"
                      TargetInventories: [
                        {
                          "Id": 1,
                          "Name": "TestDataset_1001",
                          "TemplateInventoryId": 1
                        }
                      ]
                      Opinion: "ニューロンカバレージが規定のXX%以上であり、品質に問題なしと判断した。"
                      Star: true
                      TestRunnerId: 10
                    - Id: 2
                      ParentID: 1
                      Name: MetamorphicTesting
                      Result: OK
                      ResultDetail: OK
                      CreationDatetime: "2020-09-28T01:22:03.920542"
                      UpdateDatetime: "2020-09-28T01:22:03.920542"
                      TargetInventories: [
                        {
                          "Id": 2,
                          "Name": "TestDataset_1005",
                          "TemplateInventoryId": 2
                        },
                        {
                          "Id": 3,
                          "Name": "TrainedModel_1005",
                          "TemplateInventoryId": 3
                        }
                      ]
                      Opinion: ""
                      Star: false
                      TestRunnerId: 10
                    - Id: 3
                      ParentID: 2
                      Name: AttributeCoverage
                      Result: NG
                      ResultDetail: AttributeCoverage is not enough
                      CreationDatetime: "2020-09-28T01:22:03.920542"
                      UpdateDatetime: "2020-09-28T01:22:03.920542"
                      TargetInventories: [
                        {
                          "Id": 2,
                          "Name": "TestDataset_1005",
                          "TemplateInventoryId": 4
                        }
                      ]
                      Opinion: ""
                      Star: false
                      TestRunnerId: 10
                    - Id: 4
                      ParentID: 3
                      Name: AttributeCoverage
                      Result: NA
                      ResultDetail: NA
                      CreationDatetime: "2020-09-28T01:22:03.920542"
                      UpdateDatetime: "2020-09-28T01:22:03.920542"
                      TargetInventories: [
                        {
                          "Id": 4,
                          "Name": "TestDataset_1018",
                          "TemplateInventoryId": 5
                        },
                        {
                          "Id": 5,
                          "Name": "TrainedModel_1007",
                          "TemplateInventoryId": 6
                        }
                      ]
                      Opinion: ""
                      Star: false
                      TestRunnerId: 10
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T82001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'T82002'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'T84000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptions/reportGenerator':
    post:
      tags:
        - Test descriotions
      summary: レポート生成器に対してコマンドを発行する.
      description: |
        発行コマンドは以下の通り。
          - パラメータ設定
          - レポート生成
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: コマンド
        content:
          application/json:
            schema:
              required:
                - Command
                - Destination
              properties:
                Command:
                  type: string
                  description: |
                    - `SetParam` : パラメータ設定  
                    - `Generate` : レポート生成  
                Destination:
                  type: array
                  description: |
                    - コマンドの反映先となるtestDescriptionIDを指定する。  
                    - 複数のtestDescriptionIDを指定可能とする。  
                    - すべてのtestDescriptionに対して実施したい場合は、空を指定する。  
                  items:
                    type: string
                Params:
                  type: object
                  properties:
                    Opinion:
                      type: string
                      description: |
                        - 変更する必要がない場合、省略する
                    Graphs:
                      type: array
                      description: |
                        - リストから省略したgraphは出力を無しに設定する
                      items:
                        type: object
                        properties:
                          GraphId:
                            type: integer
                            description: |
                              - `GET /testDescriptions/{testTestDescriptionsId}` で返却されたGraphs/Idを指定する  
                          ReportRequired:
                            type: boolean
                            description: |
                              - レポートの出力有無を指定する  
                          ReportIndex:
                            type: integer
                            description: |
                              - レポートの出力順序(昇順)を指定する  
                              - 同じ順序を指定した場合、エラーにはせず、ソートアルゴリズムで結果が変わることに留意すること  
                              - ReportRequiredが`false`の場合、省略する（指定されても無視する）
                          ReportName:
                            type: string
                            description: |
                              - レポートの出力名称を指定する  
                              - ReportRequiredが`false`の場合、省略する（指定されても無視する）
                    TargetReportTemplateId:
                      type: integer
                      description: |
                        - `Generate` コマンド指定時のみ有効
                        - 出力対象とするレポートテンプレートIDを設定する
                  description: |
                    - `SetParam`
                      - `Opinion` : 見解設定
                      - `Graphs` : グラフごとのレポート表示設定  
                    - `Generate` : レポート生成  
                      - `TargetReportTemplateId` : レポート出力時のテンプレートID  
                      - (TargetReportTemplateIdが指定されなかった場合、品質特性の値からダミーのテンプレートを作成し出力する)
                  items:
                    type: object
                    additionalProperties:
                      type: string
            examples:
              SetParam: # example1
                value:
                  Command: SetParam
                  Destination: ["1"]
                  Params: 
                    Opinion: "XXX"
                    Graphs: [
                      {
                        "GraphId": 1,
                        "ReportRequired": True,
                        "ReportIndex": 1,
                        "ReportName": "Graph-A"
                      },
                      {
                        "GraphId": 2,
                        "ReportRequired": True,
                        "ReportIndex": 2,
                        "ReportName": "Graph-B"
                      },
                      {
                        "GraphId": 2,
                        "ReportRequired": False,
                      }
                    ]
              GenerateAll: # example2
                value:
                  Command: Generate
                  Destination: []
                  Params:
                    TargetReportTemplateId: 1
              GeneratePart: # example3
                value:
                  Command: Generate
                  Destination: ["1","3"]
                  Params:
                    TargetReportTemplateId: 1
      responses:
        '200':
          description: コマンドの実行結果を返却する
          content:
            application/json:
              schema:
                required:
                  - Result
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  OutParams:
                    type: array
                    description: |
                      - `Generate` コマンド時に返却する。
                        - "ReportUrl": "レポートのダウンロードURL"
                    items:
                      type: object
                      additionalProperties:
                        type: string
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'D12000'
                      Message: Success.
                    OutParams: [
                      ReportUrl: "http://xxx"
                    ]
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - 未定義のCommandが指定された。
              - 存在しないグラフ種別をParamsのGraphTypeで指定された。
              - 存在しないレポートテンプレートIDが指定された。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'D18000'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'D18001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'D18002'
                      Message: Forbidden request.
        '404':
          description: |
            - 指定したOrganizerIDとmlComponentsIDの組み合わせが存在しない。
            - Destinationに指定したTestDescriptionが存在しない。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'D14000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/{OrganizerId}/mlComponents/{mlComponentsId}/testDescriptions/reportGeneratorFront':
    post:
      tags:
        - Test descriotions
      summary: レポート生成器に対してコマンドを発行する.（scrfトークンありで使用）
      description: |
        発行コマンドは以下の通り。
          - パラメータ設定
          - レポート生成
        （scrfトークンありで使用）  
      parameters:
        - name: OrganizerId
          in: path
          description: 組織ID
          required: true
          schema:
            type: string
        - name: mlComponentsId
          in: path
          description: 機械学習コンポーネントId
          required: true
          schema:
            type: integer
      requestBody:
        description: コマンド
        content:
          application/json:
            schema:
              required:
                - Command
                - Destination
              properties:
                Command:
                  type: string
                  description: |
                    - `SetParam` : パラメータ設定  
                    - `Generate` : レポート生成  
                Destination:
                  type: array
                  description: |
                    - コマンドの反映先となるtestDescriptionIDを指定する。  
                    - 複数のtestDescriptionIDを指定可能とする。  
                    - すべてのtestDescriptionに対して実施したい場合は、空を指定する。  
                  items:
                    type: string
                Params:
                  type: object
                  properties:
                    Opinion:
                      type: string
                      description: |
                        - 変更する必要がない場合、省略する
                    Graphs:
                      type: array
                      description: |
                        - リストから省略したgraphは出力を無しに設定する
                      items:
                        type: object
                        properties:
                          GraphId:
                            type: integer
                            description: |
                              - `GET /testDescriptions/{testTestDescriptionsId}` で返却されたGraphs/Idを指定する  
                          ReportRequired:
                            type: boolean
                            description: |
                              - レポートの出力有無を指定する  
                          ReportIndex:
                            type: integer
                            description: |
                              - レポートの出力順序(昇順)を指定する  
                              - 同じ順序を指定した場合、エラーにはせず、ソートアルゴリズムで結果が変わることに留意すること  
                              - ReportRequiredが`false`の場合、省略する（指定されても無視する）
                          ReportName:
                            type: string
                            description: |
                              - レポートの出力名称を指定する  
                              - ReportRequiredが`false`の場合、省略する（指定されても無視する）
                    TargetReportTemplateId:
                      type: integer
                      description: |
                        - `Generate` コマンド指定時のみ有効
                        - 出力対象とするレポートテンプレートIDを設定する
                  description: |
                    - `SetParam`
                      - `Opinion` : 見解設定
                      - `Graphs` : グラフごとのレポート表示設定  
                    - `Generate` : レポート生成  
                      - `TargetReportTemplateId` : レポート出力時のテンプレートID  
                      - (TargetReportTemplateIdが指定されなかった場合、品質特性の値からダミーのテンプレートを作成し出力する)
                  items:
                    type: object
                    additionalProperties:
                      type: string
            examples:
              SetParam: # example1
                value:
                  Command: SetParam
                  Destination: ["1"]
                  Params: 
                    Opinion: "XXX"
                    Graphs: [
                      {
                        "GraphId": 1,
                        "ReportRequired": True,
                        "ReportIndex": 1,
                        "ReportName": "Graph-A"
                      },
                      {
                        "GraphId": 2,
                        "ReportRequired": True,
                        "ReportIndex": 2,
                        "ReportName": "Graph-B"
                      },
                      {
                        "GraphId": 2,
                        "ReportRequired": False,
                      }
                    ]
              GenerateAll: # example2
                value:
                  Command: Generate
                  Destination: []
                  Params:
                    TargetReportTemplateId: 1
              GeneratePart: # example3
                value:
                  Command: Generate
                  Destination: ["1","3"]
                  Params:
                    TargetReportTemplateId: 1
      responses:
        '200':
          description: コマンドの実行結果を返却する
          content:
            application/json:
              schema:
                required:
                  - Result
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  OutParams:
                    type: array
                    description: |
                      - `Generate` コマンド時に返却する。
                        - "ReportUrl": "レポートのダウンロードURL"
                    items:
                      type: object
                      additionalProperties:
                        type: string
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'D12000'
                      Message: Success.
                    OutParams: [
                      ReportUrl: "http://xxx"
                    ]
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - 未定義のCommandが指定された。
              - 存在しないグラフ種別をParamsのGraphTypeで指定された。
              - 存在しないレポートテンプレートIDが指定された。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'D18000'
                  Message: invalid request.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'D18001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'D18002'
                      Message: Forbidden request.
        '404':
          description: |
            - 指定したOrganizerIDとmlComponentsIDの組み合わせが存在しない。
            - Destinationに指定したTestDescriptionが存在しない。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'D14000'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/download/{DownloadId}':
    get:
      tags:
        - Download
      summary: 指定されたIDに紐づくファイルをダウンロードする.
      description: |
        指定したIDに紐づくファイルをダウンロードする
      parameters:
        - name: DownloadId
          in: path
          description: ダウンロードID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ダウンロードファイルを返却する
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'D16001'
                      Message: Unauthorized request.
        '404':
          description: |
            - 指定したIDが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'D16002'
                  Message: not found page.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/roles':
    get:
      tags:
        - Role
      security: []
      summary: ユーザロール一覧取得.
      description: |
        ユーザロールの一覧を取得する.  
        TODO ロール関連の実装は保留とするため、実装は見合わせる.  
      responses:
        '200':
          description: ユーザロール情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - roles
                properties:
                  Result:
                    type: object
                    properties:
                      Code:
                        type: integer
                      Massage:
                        type: string
                  roles:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                        description: |
                          以下のユーザロールを返却する。
                          * admin
                          * mlmanager
                          * user
                example:
                  Result:
                    Code: U12000
                    Message: Success.
                  roles:
                    - Id: 1
                      Name: admin
                    - Id: 2
                      Name: mlmanager
                    - Id: 3
                      Name: user
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  '/users':
    get:
      tags:
        - UserControl
      summary: ユーザー一覧を取得する.
      description: |
        ユーザ一覧を取得する.  
        TODO ユーザ関連の実装は保留とするため、実装は見合わせる.  
      responses:
        '200':
          description: |
            成功。取得したユーザ一覧を返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U01000'
                      Message: Success.
                  Users:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/User'
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U01001'
                      Message: Unauthorized request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
    post:
      tags:
        - UserControl
      security: []
      summary: ユーザーを追加する.
      description: |
        ユーザーを追加する.  
        TODO ユーザ関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  description: ログインユーザ名
                  type: string
                OrganizerId:
                  description: 所属する組織ID
                  type: string
                AccountId:
                  description: ログインに使用するアカウントID
                  type: string
                Password:
                  description: ログインに使用するパスワード
                  type: string
      responses:
        '200':
          description: |
            成功。追加ユーザIDを返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                  UserId:
                    type: integer
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'U02000'
                      Message: Success.
                    UserId: 1
        '400':
          description: >
            リクエストパラメータに問題あり  
            - 指定した組織IDが存在しない  
            - 存在するアカウントIDを指定  
            - パスワードに空を指定  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U02001'
                      Message: Invalid request parameter.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/users/{AccountId}/password':
    parameters:
      - in: path
        name: AccountId
        description: アカウントID
        schema:
          type: string
        required: true
    put:
      tags:
        - UserControl
      security: []
      summary: ユーザーパスワードを変更する.
      description: |
        ユーザーパスワードを変更する.  
        ログインなしで実施可能とする.  
        現状のパスワードが正しくない場合、400エラーを返却する.  
        TODO ユーザ関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CurrentPassword:
                  description: 現在のログインパスワード
                  type: string
                NewPassword:
                  description: 新ログインパスワード
                  type: string
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'U03000'
                      Message: Success.
        '400':
          description: >
            リクエストパラメータに問題あり  
            - 現在のパスワードが一致しない  
            - 新パスワードに空を指定  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U03001'
                      Message: Invalid request parameter.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U03002'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/users/{id}':
    parameters:
      - in: path
        name: id
        description: ユーザID
        schema:
          type: integer
        required: true
    put:
      tags:
        - UserControl
      summary: ユーザー情報を編集する.
      description: |
        ユーザー情報を編集する.  
        本機能はadmin/mlmanager/userが実行可能とする.  
        TODO ユーザ関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NewName:
                  description: 新ユーザ名
                  type: string
                NewOrganizerId:
                  description: 新組織ID
                  type: string
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'U08000'
                      Message: Success.
        '400':
          description: >
            リクエストパラメータに問題あり  
            - 指定した組織IDが存在しない  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U08001'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U08002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U08003'
                      Message: Forbidden request.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U08004'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
    delete:
      tags:
        - UserControl
      summary: ユーザーを削除する.
      description: |
        ユーザーを削除する.  
        本機能はadmin/mlmanagerが実行可能とする.  
        TODO ユーザ関連の実装は保留とするため、実装は見合わせる.  
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'U04000'
                      Message: Success.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U04001'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U04002'
                      Message: Forbidden request.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U04003'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/users/{id}/password':
    parameters:
      - in: path
        name: id
        description: ユーザID
        schema:
          type: integer
        required: true
    put:
      tags:
        - UserControl
      summary: ユーザーパスワードを変更する.
      description: |
        ユーザーパスワードを変更する.  
        本機能はadmin/mlmanagerが実行可能とする.  
        現状のパスワードを設定する必要がないパスワードリセット機能となる.  
        TODO ユーザ関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                NewPassword:
                  description: ログインに使用するパスワード
                  type: string
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'U05000'
                      Message: Success.
        '400':
          description: >
            リクエストパラメータに問題あり  
            - パスワードに空を指定  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U05001'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U05002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U05003'
                      Message: Forbidden request.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U05004'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/users/{id}/role':
    parameters:
      - in: path
        name: id
        description: ユーザID
        schema:
          type: integer
        required: true
    post:
      tags:
        - UserControl
      summary: ユーザーロールを追加する.
      description: |
        ユーザーロールを追加する.  
        本機能はadmin/mlmanagerが実行可能とする.  
        ロールとは、admin|mlmanager|userのいずれかで、mlmanagerとuserはmlcomponent単位に設定する.  
        重複ロールを追加しようとした場合、200を返却する.  
        TODO ロール関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserRole:
                  $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'U06000'
                      Message: Success.
        '400':
          description: >
            リクエストパラメータに問題あり  
            - 存在しない権限設定の組み合わせ  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U06001'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U06002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U06003'
                      Message: Forbidden request.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U06004'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
    delete:
      tags:
        - UserControl
      summary: ユーザーロールを削除する.
      description: |
        ユーザーロールを削除する.  
        本機能はadmin/mlmanagerが実行可能とする.  
        与えられていないロールに対して削除をした場合、200を返却する.  
        TODO ロール関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserRole:
                  $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'U07000'
                      Message: Success.
        '400':
          description: >
            リクエストパラメータに問題あり  
            - 存在しない権限設定の組み合わせ  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U07001'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U07002'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U07003'
                      Message: Forbidden request.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'U07004'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/organizers':
    get:
      tags:
        - Organizer
      summary: 組織一覧を取得する.
      description: |
        組織一覧を取得する.  
        TODO 組織関連の実装は保留とするため、実装は見合わせる.  
      responses:
        '200':
          description: |
            成功。取得した組織一覧を返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O01000'
                      Message: Success.
                  Organizers:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Organizer'
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O01401'
                      Message: Unauthorized request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
    post:
      tags:
        - Organizer
      summary: 組織を追加する.
      description: |
        組織を追加する.  
        ログインユーザであれば誰でも実施可能である.  
        後述の組織変更、組織削除APIでは操作可能な権限を、adminまたは当該組織の作成ユーザと限定するため、  
        作成ユーザIDを永続化してサーバ内部に保持する.  
        TODO 組織関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  description: 組織名
                  type: string
                OrganizerId:
                  description: 組織ID
                  type: string
            example:
              Name: Aチーム
              OrganizerId: team-A
      responses:
        '200':
          description: |
            成功。IDを返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                  Id:
                    type: integer
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'O02000'
                      Message: Success.
                    Id: 1
        '400':
          description: |
            リクエストパラメータに問題あり  
            - 組織名に空を指定  
            - 組織IDに空を指定  
            - 指定した組織IDが使用済み  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O02400'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O02401'
                      Message: Unauthorized request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/organizers/{Id}':
    parameters:
      - in: path
        name: Id
        description: ID（DB管理上のIDであり、ユーザが入力する組織IDとは別）
        schema:
          type: integer
        required: true
    put:
      tags:
        - Organizer
      summary: 組織を変更する.
      description: |
        組織を変更する.  
        変更操作はAdminか、組織作成ユーザのみ受け付ける.  
        TODO 組織関連の実装は保留とするため、実装は見合わせる.  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  description: 組織名
                  type: string
                OrganizerId:
                  description: 組織ID
                  type: string
            example:
              Name: Bチーム
              OrganizerId: team-B
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'O03000'
                      Message: Success.
        '400':
          description: |
            リクエストパラメータに問題あり  
            - 組織名に空を指定  
            - 組織IDに空を指定  
            - 指定した組織IDが使用済み  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O03400'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O03401'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O03403'
                      Message: Forbidden request.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O03404'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
    delete:
      tags:
        - Organizer
      summary: 組織を削除する.
      description: |
        組織を削除する.  
        変更操作はAdminか、組織作成ユーザのみ受け付ける.  
        削除する組織に関連する機械学習コンポーネントと、  
        それに結び付くインベントリ情報とテストディスクリプション情報を削除する.  
        ユーザに割り当て済みの組織を削除しようとした場合、400エラーを返却する.  
        TODO 組織関連の実装は保留とするため、実装は見合わせる.  
      responses:
        '200':
          description: |
            成功。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
              examples:
                Generate:
                  value:
                    Result:
                      Code: 'O04000'
                      Message: Success.
        '400':
          description: |
            リクエストパラメータに問題あり  
            - 指定組織IDがユーザに割り当て済み  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O04400'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O04401'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O04403'
                      Message: Forbidden request.
        '404':
          description: >
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'O04404'
                      Message: Not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/reportTemplates':
    get:
      tags:
        - ReportTemplate
      security: []
      summary: レポートテンプレート一覧を取得する.
      description: |
        レポートテンプレート一覧を取得する.
      responses:
        '200':
          description: |
            成功。取得したレポートテンプレート一覧を返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R01000'
                      Message: Success.
                  ReportTemplates:
                    type: array
                    items:
                      type: object
                      properties:
                        Id:
                          type: integer
                        Name:
                          type: string
                        GidelineId:
                          type: integer
                        CreationDatetime:
                          type: string
                        UpdateDatetime:
                          type: string
                      example:
                        - Id: 1
                          Name: AIQMガイドライン準拠レポートテンプレート
                          GidelineId: 1
                          CreationDatetime: '2020-09-28T01:22:03.920542'
                          UpdateDatetime: '2020-09-28T01:22:03.920542'
                        - Id: 2
                          Name: QA4AIガイドライン準拠レポートテンプレート
                          GidelineId: 2
                          CreationDatetime: '2020-09-28T01:22:03.920542'
                          UpdateDatetime: '2020-09-28T01:22:03.920542'
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
    post:
      tags:
        - ReportTemplate
      summary: レポートテンプレートをインストールする.
      description: |
        レポートテンプレート(zip)をインストールする.  
        指定したレポートテンプレート名とガイドラインIDのテンプレートレポートが既に存在する場合、新規追加ではなく上書きをする.  
        zip内のファイル構成例は以下とする.  
        ファイルチェックは以下2点のチェックを実施する.  
        　①ZIPを正常に解凍できること  
        　②解凍後、「base_report_format.html」「css/base_report.css」が存在すること  
        そのほかのファイル構成は任意とする.  
        ```
          root  
            │  base_report_format.html  
            │  frame.html  
            │  frame_image.html  
            │  frame_summary.html  
            │  frame_table.html  
            │  frame_textarea.html  
            │  
            ├─css  
            │      base_report.css  
            │  
            └─resource  
                    title_bg.png  
                    title_green.png  
        ```  
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Name:
                  type: string
                GidelineId:
                  type: integer
                File:
                  description: レポートテンプレートをZIP圧縮したファイルのバイナリデータ
                  type: object
      responses:
        '200':
          description: |
            成功。レポートテンプレートIDを返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R02000'
                      Message: Success.
                  ReportTemplateId:
                    type: integer
        '400':
          description: |
            リクエストパラメータに問題あり  
            - レポートテンプレート名が空  
            - ガイドラインIDが存在しない  
            - レポートテンプレートファイルのチェックエラー  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R02001'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R02002'
                      Message: Unauthorized request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/reportTemplates/generate':
    post:
      tags:
        - ReportTemplate
      summary: レポートテンプレートのひな形を生成する.
      description: |
        レポートテンプレートのひな形「base_report_format.html」を生成する.  
        作成した一式をzipファイルとして返却する.  
        ```
          root  
            │  base_report_format.html  
            │  frame.html  
            │  frame_image.html  
            │  frame_summary.html  
            │  frame_table.html  
            │  frame_textarea.html  
            │  
            ├─css  
            │      base_report.css  
            │  
            └─resource  
                    title_bg.png  
                    title_green.png  
        ```  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                GuidelineId:
                  description: ガイドラインID
                  type: integer
      responses:
        '200':
          description: ZIPファイルを返却する
        '400':
          description: |
            リクエストパラメータに問題あり  
            - ガイドラインIDが存在しない  
            - 指定ガイドラインに品質特性が存在しない  
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R03400'
                      Message: Invalid request parameter.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R03401'
                      Message: Unauthorized request.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
  '/reportTemplates/{id}/zip':
    parameters:
      - in: path
        name: id
        description: レポートテンプレートID
        schema:
          type: integer
        required: true
    get:
      tags:
        - ReportTemplate
      summary: レポートテンプレート一式をZIP形式でダウンロードする.
      description: |
        レポートテンプレート一式をZIP形式でダウンロードする.
      responses:
        '200':
          description: ZIPファイルを返却する
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'R04401'
                      Message: Unauthorized request.
        '404':
          description: |
            - 指定したIDが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'R04404'
                  Message: not found.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  '/Guideline/{GuidelineId}':
    delete:
      tags:
        - Guideline
      summary: ガイドライン削除.
      description: |
        ガイドラインを削除する。
        削除するガイドラインに関連するscope、quality_dimension、scope_quality_dimensionを削除する。
      parameters:
        - name: GuidelineId
          in: path
          description: ガイドラインID
          required: true
          schema:
            type: string
      responses:
        '200':
          description:  削除成功通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G23000'
                  Message: success.
        '401':
          description: >
            未認証時のリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G23401'
                      Message: Unauthorized request.
        '403':
          description: |
            不許可リソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G23403'
                      Message: Forbidden request.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G23404'
                  Message: not found guideline.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G23999'
                  Message: internal server error

  '/Scopes':
    get:
      tags:
        - Scopes
      security: []
      summary: スコープ一覧取得.
      description: |
        スコープ一覧取得をする。  
      responses:
        '200':
          description: スコープ情報
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Scopes
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                  Scopes:
                    type: array
                    items:
                      type: object
                      properties:
                        Id:
                          type: integer
                        GuidelineId:
                          type: integer
                        Name:
                          type: string
                        CreationDatetime:
                          type: string
                        UpdateDatetime:
                          type: string
                example:
                  Result:
                    Code: "S00000"
                    Message: "Success"
                  Scopes:
                    - Id: 1
                      GuidelineId: 1
                      Name: "AIQM Scope"
                      CreationDatetime: "2021/04/01 09:01:24"
                      UpdateDatetime: "2021/06/15 11:31:56"
                    - Id: 2
                      GuidelineId: 1
                      Name: "ML Scope"
                      CreationDatetime: "2021/05/04 14:08:07"
                      UpdateDatetime: "2021/05/16 17:54:41"
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'S00404'
                      Message: Not found Guideline.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'

  '/guidelines/{GuidelineId}/scopes':
    get:
      tags:
        - Scopes
      summary: ガイドライン所属のスコープ一覧取得 
      description: |
        ガイドライン所属のスコープ一覧を取得する。  

        ＜処理詳細＞  
        １．ガイドライン所属のスコープ一覧を取得する。  
        ２．ガイドライン所属のスコープ一覧をユーザに返す。  
      security: []
      parameters:
        - name: GuidelineId
          in: path
          description: ガイドラインID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ガイドライン所属のスコープ一覧の取得に成功した。 取得したスコープの一覧を返す。
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Scopes
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  Scopes:
                    type: array
                    items:
                      type: object
                      properties:
                        Id:
                          type: integer
                        Name:
                          type: string
                        GuidelineId:
                          type: integer
                        UserId:
                          type: integer
                        CreationDatetime:
                          type: string
                        UpdateDatetime:
                          type: string
                example:
                  Result:
                    Code: "S01000"
                    Message: "Success"
                  Scopes:
                    - Id: 1
                      GuidelineId: 2
                      Name: "プロセススコープ"
                      UserId: 2
                      CreationDatetime: "2022-01-01 09:01:24"
                      UpdateDatetime: "2022-03-22 11:31:56"
                    - Id: 2
                      GuidelineId: 2
                      Name: "製品・システムスコープ"
                      UserId: 2
                      CreationDatetime: "2022-01-05 09:01:24"
                      UpdateDatetime: "2022-02-01 15:11:33"
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'S01500'
                  Message: unexpected error.

  '/guidelines/{GuidelineId}/scope_quality_dimensions':
    get:
      tags:
        - Scopes
      summary: ガイドライン所属のスコープとQualityDimensionの関連一覧取得
      description: |
        ガイドライン所属のスコープとQualityDimensionの関連一覧を取得する。  

        ＜処理詳細＞  
        １．ガイドライン所属のスコープとQualityDimensionの関連一覧を取得する。  
        ２．ガイドライン所属のスコープとQualityDimensionの関連一覧をユーザに返す。  
      security: []
      parameters:
        - name: GuidelineId
          in: path
          description: ガイドラインID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ガイドライン所属のスコープとQualityDimensionの関連一覧の取得に成功した。取得した一覧を返す。
          content:
            application/json:
              schema:
                required:
                  - Result
                  - ScopeQualityDimensions
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  ScopeQualityDimensions:
                    type: array
                    items:
                      type: object
                      properties:
                        Id:
                          type: integer
                        GuidelineId:
                          type: integer
                        ScopeId:
                          type: integer
                        QualityDimensionId:
                          type: integer
                        CreationDatetime:
                          type: string
                example:
                  Result:
                    Code: "S02000"
                    Message: "Success"
                  ScopeQualityDimensions:
                    - Id: 1
                      GuidelineId: 2
                      ScopeId: 1
                      QualityDimensionId: 2
                      CreationDatetime: "2022-01-01 09:01:24"
                    - Id: 2
                      GuidelineId: 2
                      ScopeId: 1
                      QualityDimensionId: 3
                      CreationDatetime: "2022-01-05 09:01:24"
                    - Id: 3
                      GuidelineId: 2
                      ScopeId: 2
                      QualityDimensionId: 4
                      CreationDatetime: "2022-02-01 11:23:24"
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'S02500'
                  Message: unexpected error.

  '/guidelines/{GuidelineId}/quality_dimensions':
    get:
      tags:
        - Quality Dimension
      summary: ガイドライン毎の品質特性一覧の取得
      description: |
        ガイドライン毎の品質特性一覧の取得

        ＜処理詳細＞  
        １．ガイドライン毎の品質特性一覧を取得する。  
        ２．ガイドライン毎の品質特性一覧をユーザに返す。  
         
      security: []
      parameters:
        - name: GuidelineId
          in: path
          description: ガイドラインID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 品質特性の一覧取得に成功した。品質特性の一覧を返す。
          content:
            application/json:
              schema:
                required:
                  - Result
                  - QualityDimensions
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  QualityDimensions:
                    type: array
                    items:
                      type: object
                      properties:
                        Id:
                          type: integer
                        Name:
                          type: string
                        Description:
                          type: string
                        GuidelineId:
                          type: integer
                          description: |
                            紐づけられているガイドラインのID  
                            ガイドラインと関連付けられていない場合、ダミーガイドラインID(GuidelineId=1)が設定される  
                        SubDimensions:
                          type: string
                          description: サブ品質特性（カンマ区切りの配列形式）
                        QualityDimensionLevels:
                          type: array
                          description: 品質特性レベル
                          items:
                            type: object
                            properties:
                              QualityDimensionLevelId:
                                type: string
                              Name:
                                type: string
                              Description:
                                type: string
                              Level:
                                type: integer
                        Url:
                          type: string
                        CreationDatetime:
                          type: string
                        UpdateDatetime:
                          type: string
                example:
                  Result:
                    Code: "G01000"
                    Message: "Success"
                  QualityDimensions:
                    - Id: 1
                      Name: "Diversity_of_test_data"
                      Description: "Diversity of test data"
                      GuidelineId: 2
                      SubDimensions: "Accuracy_of_traained_model,Robustness_of_trained_model"
                      QualityDimensionLevels:
                        - QualityDimensionLevelId: "A"
                          Name: "name A"
                          Description: "description A"
                          Level: 0
                        - QualityDimensionLevelId: "B"
                          Name: "name B"
                          Description: "description B"
                          Level: 1
                      Url: "https://hostnmae/quality-dimension/api/0.0.1/AIQM_Guideline/Diversity_of_test_data"
                      CreationDatetime: "2021-04-01 09:01:24"
                      UpdateDatetime: "2021-06-15 11:31:56"
                    - Id: 2
                      Name: "Accuracy_of_traained_model"
                      Description: "Accuracy of traained model"
                      GuidelineId: 2
                      SubDimensions: null
                      QualityDimensionLevels:
                        - QualityDimensionLevelId: "A"
                          Name: "name A"
                          Description: "description A"
                          Level: 0
                        - QualityDimensionLevelId: "B"
                          Name: "name B"
                          Description: "description B"
                          Level: 1
                      Url: "https://hostnmae/quality-dimension/api/0.0.1/AIQM_Guideline/Accuracy_of_traained_model"
                      CreationDatetime: "2021-05-04 14:08:07"
                      UpdateDatetime: "2021-05-16 17:54:41"
                    - Id: 3
                      Name: "Robustness_of_trained_model"
                      Description: "description Robustness of trained model"
                      GuidelineId: 2
                      SubDimensions: null
                      QualityDimensionLevels:
                        - QualityDimensionLevelId: "A"
                          Name: "name A"
                          Description: "description A"
                          Level: 0
                        - QualityDimensionLevelId: "B"
                          Name: "name B"
                          Description: "description B"
                          Level: 1
                      Url: "https://hostnmae/quality-dimension/api/0.0.1/AIQM_Guideline/Robustness_of_trained_model"
                      CreationDatetime: "2022-02-04 11:08:07"
                      UpdateDatetime: "2022-02-16 13:12:55"
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q01500'
                  Message: unexpected error.

  '/scopes/{ScopeId}/quality_dimensions':
    get:
      tags:
        - Quality Dimension
      security: []
      summary: 品質特性一覧取得.
      description:  |
        スコープに関連する品質特性の一覧を取得する。
      parameters:
        - name: ScopeId
          in: path
          description: スコープId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 品質特性取得成功
          content:
            application/json:
              schema:
                required:
                  - Result
                  - QualityDimensions
                properties:
                  Result:
                    type: object
                    properties:
                      Result:
                        allOf:
                          - $ref: '#/components/schemas/Result'
                        example:
                          Code: "Q00000"
                          Message: "Success"
                  QualityDimensions:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/QualityDimension'
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'

  '/qualityDimensions/{GuidelineName}/{QualityDimensionName}':
    get:
      tags:
        - Quality Dimension
      summary: 画面表示用の品質特性を取得
      description: |
        画面表示用の品質特性を取得する.

        ＜処理詳細＞  
        １．画面表示用の品質特性を取得する。  
        ２．画面表示用の品質特性情報をユーザに返す。  
      security: []
      parameters:
        - name: GuidelineName
          in: path
          description: |
            ガイドライン名  
          required: true
          schema:
            type: string
        - name: QualityDimensionName
          in: path
          description: |
            品質特性名  
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 画面表示用の品質特性の取得に成功した。画面表示用の品質特性情報を返す。
          content:
            application/json:
              schema:
                required:
                  - Result
                  - QualityDimension
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  QualityDimension:
                    type: object
                    properties:
                      Id:
                        type: integer
                      Name:
                        type: string
                      Description:
                        type: string
                      SubDimensions:
                        type: string
                      Url:
                        type: string
                      AnnotationTags:
                        type: object
                        properties:
                          Id:
                            type: integer
                          Name:
                            type: string
                      CreationDatetime:
                        type: string
                      UpdateDatetime:
                        type: string
                example:
                  Result:
                    Code: "Q02000"
                    Message: "Success"
                  QualityDimension:
                    Id: 2
                    Name: "Diversity_of_test_data"
                    Description: "Diversity of test data"
                    SubDimensions: "Accuracy_of_traained_model,Robustness_of_trained_model"
                    Url: "https://hostnmae/quality-dimension/api/0.0.1/AIQM_Guideline/Diversity_of_test_data"
                    AnnotationTags:
                    - Id: 1
                      Name: "Dataset"
                    CreationDatetime: "2021-04-01 09:01:24"
                    UpdateDatetime: "2021-06-15 11:31:56"
        '404':
          description: |
            アクセスエラーが発生ときに返却する。
              - 存在しない、または削除済み品質特性にアクセスした場合
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q02404'
                  Message: not found quality dimension.
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'Q02500'
                  Message: unexpected error.

  '/guidelines/{guideline_id}/guideline_schema_file':
    get:
      summary: ガイドラインスキーマファイル取得
      description: |
        指定したidを持つガイドラインスキーマファイルを取得する。   

        ＜処理詳細＞  
        １．ユーザが指定したガイドラインのidを受信する。  
        ２．idに紐づくガイドラインスキーマファイルを取得する。  
        ３．取得した情報をユーザに返す。  
      security: []
      tags:
        - Guideline
      parameters:
      - in: path
        name: guideline_id
        description: ガイドラインID  
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: |
            ガイドラインスキーマファイル取得に成功した。  
          content:
            application/json:
              schema:
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G26000'
                      Message: Success.
                  GuidelineSchemaFile:
                      type: object
        '404':
          description: |
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G26404'
                      Message: Not found.
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G26500'
                      Message: unexpected error.
    put:
      summary: ガイドラインスキーマファイル更新
      description: |
        指定したidを持つガイドラインスキーマファイルを更新する。   

        ＜処理詳細＞  
        １．ユーザが指定したガイドラインのidとガイドラインスキーマファイルを受信する。  
        ２．ガイドラインスキーマファイルを更新する。  
        ３．登録合否とIDをユーザに返す。  
      security: []
      tags:
        - Guideline
      parameters:
      - in: path
        name: guideline_id
        description: ガイドラインID  
        schema:
          type: integer
        required: true
      requestBody:
        description: ガイドラインスキーマファイル情報
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                File:
                  description: ガイドラインスキーマファイルのバイナリデータ
                  type: object
      responses:
        '200':
          description: ガイドラインの更新に成功した。登録結果を返す。
          content:
            application/json:
              schema:
                required:
                  - Result
                  - GuidelineSchemaFileId
                properties:
                  Result:
                    $ref: '#/components/schemas/Result'
                  GuidelineSchemaFileId:
                    type: integer
                example:
                  Result:
                    Code: 'G27000'
                    Message: Success.
                  GuidelineSchemaFileId: 1
        '400':
          description: |
            無効なリクエストを受信したときに返却する。
              - 入力パラメータが不正な場合
              - 重複したガイドライン名を設定した場合
              - スペースを含むガイドライン名を設定した場合
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G27400'
                  Message: invalid request.
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G27500'
                  Message: unexpected error.
    delete:
      tags:
        - Guideline
      summary: ガイドライン削除.
      description: |
        ガイドラインを削除する。
        削除するガイドラインに関連するscope、quality_dimension、scope_quality_dimension、guideline_schema_fileを削除する。
      parameters:
        - name: GuidelineId
          in: path
          description: ガイドラインID
          required: true
          schema:
            type: string
      responses:
        '200':
          description:  削除成功通知
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G28000'
                  Message: success.
        '404':
          description:  アクセスエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G28404'
                  Message: not found guideline.
        '500':
          description: 予期せぬエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'G28999'
                  Message: internal server error

  '/guidelines/{guideline_id}/guideline_schema_file/edit_check':
    get:
      summary: ガイドラインスキーマファイル編集チェック
      description: |
        指定したガイドラインidに対してガイドラインスキーマファイルで編集できるか否かを判定する。   

        ＜処理詳細＞  
        １．ユーザが指定したガイドラインidとガイドラインスキーマファイルを受信する。  
        ２．ガイドラインidでDBのガイドライン情報を検索し、MlComponentやTestDescriptionで使用中のscopeとQDを取得する。  
        ３．ガイドラインスキーマファイルの編集によって上記２が削除されなければ、編集可能としてTrueを返す（編集不可ならFalse）。  
      security: []
      tags:
        - Guideline
      parameters:
      - in: path
        name: guideline_id
        description: ガイドラインID  
        schema:
          type: integer
        required: true
      requestBody:
        description: ガイドラインスキーマファイル情報
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                File:
                  description: ガイドラインスキーマファイルのバイナリデータ
                  type: object
      responses:
        '200':
          description: |
            編集可否情報の取得に成功した。  
          content:
            application/json:
              schema:
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G29000'
                      Message: Success.
                  CheckResult:
                    type: boolean
                  WarningMessage:
                    type: array
                    items:
                      type: string
        '404':
          description: |
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G29404'
                      Message: Not found.
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G29500'
                      Message: unexpected error.

  '/guidelines/{guideline_id}/guideline_schema_file/delete_check':
    get:
      summary: ガイドラインスキーマファイル削除チェック
      description: |
        指定したガイドラインidに対して削除できるか否かを判定する。   

        ＜処理詳細＞  
        １．ユーザが指定したガイドラインidを受信する。  
        ２．ガイドラインidでDBのガイドライン情報を検索し、MlComponentやTestDescriptionで使用中のscopeとQDを取得する。  
        ３．上記２が取得されなければ、編集可能としてTrueを返す（編集不可ならFalse）。  
      security: []
      tags:
        - Guideline
      parameters:
      - in: path
        name: guideline_id
        description: ガイドラインID  
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: |
            編集可否情報の取得に成功した。  
          content:
            application/json:
              schema:
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G30000'
                      Message: Success.
                  CheckResult:
                    type: boolean
                  WarningMessage:
                    type: array
                    items:
                      type: string
        '404':
          description: |
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G30404'
                      Message: Not found.
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'G30500'
                      Message: unexpected error.

  '/setting/{key}':
    get:    
      summary: setting取得.
      description:  |
        DBのM_Settingからkeyに一致した値を取得する。
      security: []
      tags:
        - setting
      parameters:
      - in: path
        name: key
        description: キー値  
        schema:
          type: string
        required: true
      responses:
        '200':
          description: setting取得成功
          content:
            application/json:
              schema:
                required:
                  - Result
                  - Value
                properties:
                  Result:
                    type: object
                    properties:
                      Result:
                        allOf:
                          - $ref: '#/components/schemas/Result'
                        example:
                          Code: "V00000"
                          Message: "Success"
                  Value:
                    type: string
        '404':
          description: |
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'V00404'
                      Message: Not found.
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'V00500'
                      Message: unexpected error.
    put:
      summary: setting値変更
      description: |
        DBのsettingの値を変更する。   

        ＜処理詳細＞  
        １．ユーザが指定したsettingテーブルのkeyとvalueを受信する。  
        ２．DBのM_Settingのkeyに対応したvalueを変更する。  
        ３．変更結果を返す。  
      security: []
      tags:
        - setting
      parameters:
      - in: path
        name: key
        description: キー値  
        schema:
          type: string
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                Value:
                  description: 変更対象のvalue
                  type: string
      responses:
        '200':
          description: |
            変更結果の取得に成功した。  
          content:
            application/json:
              schema:
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'V10000'
                      Message: Success.
                  Value:
                    type: string
        '400':
          description: |
            以下の無効なリクエストを受信したときに返却する。
              - ValidationError
              - TypeError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
              example:
                Result:
                  Code: 'V10400'
                  Message: invalid request.
        '404':
          description: |
            存在しないリソースに対するリクエストを受信したときに返却する。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'V10404'
                      Message: Not found.
        '500':
          description: 予期せぬエラーが発生した。
          content:
            application/json:
              schema:
                type: object
                properties:
                  Result:
                    allOf:
                      - $ref: '#/components/schemas/Result'
                    example:
                      Code: 'V10500'
                      Message: unexpected error.

components:
  schemas:
    Result:
      type: object
      required:
        - Code
        - Massage
      properties:
        Result:
          type: object
          properties:
            Code:
              type: integer
            Massage:
              type: string
          example:
            Code: 'XX9999(XX:機能分類コード)'
            Message: unexpected error.
    AIT:
      type: object
      description: |
        AIT一覧系のAPIで返却するAITの基本情報
        詳細情報は別のオブジェクトとして持つ
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        source_repository:
          type: string
        create_user_account:
          type: string
        create_user_name:
          type: string
        quality:
          type: string
        keywords:
          type: array
          items:
            type: string
        references:
          type: object
          properties:
            bib_info:
              type: string
            additional_info:
              type: string
            url:
              type: string
        licenses:
          type: array
          items:
            type: string
      example:
        name: eval_mnist_acc_tf2.3
        version: 0.1
        description: >
          Only Sequential API Model
          Accuracy = TP+TNTP+FP+FN+TN
        source_repository: http://example.com/link-to-repository
        create_user_account: airc_developer
        create_user_name: 開発者A
        quality: https://airc.aist.go.jp/aiqm/quality/internal/Accuracy_of_trained_model
        keywords: [Accuracy, Model Assessment, Performance, Image Classification]
        references: []
        licenses: [MIT License]

    AITDetail:
      allOf:
        - $ref: "#/components/schemas/AIT"
        - type: object
          properties:
            parameters:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
                  description:
                    type: string
                  default_val:
                    type: string
                  min:
                    type: string
                  max:
                    type: string
                  depends_on_parameter:
                    type: string
            inventories:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
                  description:
                    type: string
                  requirements:
                    type: array
                    items:
                      type: object
                      properties:
                        format:
                          type: string
                        compatible_packages:
                          type: array
                          items: 
                            type: object
                            properties:
                              name:
                                type: string
                              version:
                                type: string
                              additional_info:
                                type: string
                        additional-info:
                          type: array
                          items: 
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: object
                        min: 
                          type: string
                        max: 
                          type: string
                  depends_on_parameter:
                    type: string
            products:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - measure
                      - resource
                      - download
                  name:
                    type: string
                  description:
                    type: string
          example:
            name: eval_mnist_acc_tf2.3
            version: 0.1
            description: >
              Only Sequential API Model
              Accuracy = TP+TNTP+FP+FN+TN
            create_user_account: airc_developer
            create_user_name: 開発者A
            source_repository: http://example.com/link-to-repository
            quality: https://airc.aist.go.jp/aiqm/quality/internal/Accuracy_of_trained_model
            keywords: [Accuracy, Model Assessment, Performance, Image Classification]
            references: []
            licenses: [MIT License]
            parameters:
              - name: class_count
                type: int
                description: multiple classification class number
                default_val: 10
                min: 2
                max: 99
              - name: class_count_correction
                type: int
                description: correct multiple classification class number
                default_val: 10
                min: 2
                max: 99
                depends_on_parameter: class_count
            inventories:
              - name: trained_model
                type: model
                description: Tensorflow 2.3で学習したモデル
                requirements:
                  - format: h5
                  - compatible_packages: 
                    - name: package_01
                      version: 1.0
                      additional_info: method_01
                    - name: package_02
                      version: 2.0
                      additional_info: method_02
                  - additional_info:
                    - functionality: inference
                    - tasks: 
                      - Image Classification
                      - Object Detection
                    - serialization_type: serialized
                    - input_formats: 
                      - image
                      - video
                    - output_shape: 
                      - None
                      - 320
                      - 240
                      - MultiDim
                      - 1
                    - output_description: 
                      - batch_size
                      - x-axis
                      - y-axis
                      - class_probability(multi-hot encoding)
                      - confidence
                depends_on_parameter: class_count
              - name: class label
                type: attribute set
                description: クラス毎のラベルデータ
                depends_on_parameter: class_count
                requirements:
                  - format: csv
            products:
              - type: measure
                name: "Accuracy"
                description: "(TP+TN) / (TP+FP+FN+TN)"
              - type: download
                name: Log
                description: AIT実行ログ

    AITManifest:
      type: object
      description: |
        AITManifest  
        JSON構造はAIT_Manifest_Schema/schema.jsonを参照。  
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        source_repository:
          type: string
        quality:
          type: string
        keywords:
          type: array
          items:
            type: string
        references:
          type: object
          properties:
            bib_info:
              type: string
            additional_info:
              type: string
            url:
              type: string
        licenses:
          type: array
          items:
            type: string
        parameters:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              description:
                type: string
              default_val:
                type: string
              min:
                type: string
              max:
                type: string
              depends_on_parameter:
                type: string
        inventories:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              description:
                type: string
              requirements:
                type: array
                items:
                  type: object
                  properties:
                    format:
                      type: string
                    compatible_packages:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          version:
                            type: string
                          additional_info:
                            type: string
                    additional-info:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                          value:
                            type: object
                    min:
                      type: string
                    max:
                      type: string
              depends_on_parameter:
                      type: string
        report:
          type: array
          items:
            type: object
            properties:
              measures:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
                    description:
                      type: string
                    structure:
                      type: string
                    min:
                      type: string
                    max:
                      type: string
              resources:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
                    description:
                      type: string
        downloads:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
      example:
        name: eval_mnist_acc_tf2.3
        version: 0.1
        description: >
          Only Sequential API Model
          Accuracy = TP+TNTP+FP+FN+TN
        source_repository: http://example.com/link-to-repository
        quality: https://airc.aist.go.jp/aiqm/quality/internal/Accuracy_of_trained_model
        keywords: [Accuracy, Model Assessment, Performance, Image Classification]
        references: []
        licenses: [MIT License]
        parameters:
          - name: class_count
            type: int
            description: multiple classification class number
            default_val: 10
            min: 2
            max: 99
          - name: class_count_correction
            type: int
            description: correct multiple classification class number
            default_val: 10
            min: 2
            max: 99
            depends_on_parameter: class_count
        inventories:
          - name: trained_model
            type: model
            description: Tensorflow 2.3で学習したモデル
            requirements:
              - format: h5
              - compatible_packages: 
                - name: package_01
                  version: 1.0
                  additional_info: method_01
                - name: package_02
                  version: 2.0
                  additional_info: method_02
              - additional_info:
                - functionality: inference
                - tasks: 
                  - Image Classification
                  - Object Detection
                - serialization_type: serialized
                - input_formats: 
                  - image
                  - video
                - output_shape: 
                  - None
                  - 320
                  - 240
                  - MultiDim
                  - 1
                - output_description: 
                  - batch_size
                  - x-axis
                  - y-axis
                  - class_probability(multi-hot encoding)
                  - confidence
            depends_on_parameter: class_count
          - name: class label
            type: attribute set
            description: クラス毎のラベルデータ
            depends_on_parameter: class_count
            requirements:
              - format: csv
                min: "1"
                max: "4"
        report:
          measures:
          - name: Accuracy
            type: "float"
            description: "(TP+TN) / (TP+FP+FN+TN)"
            structure: "single"
            min: "0"
            max: "1"
          - name: Precision
            type: "float"
            description: "TP / (TP+FP)"
            structure: "single"
            min: "0"
            max: "1"
          resources:
          - name: ConfusionMatrixHeatmap
            type: "picture"
            description: "混同行列(ヒートマップ)"
          - name: ROC-curve
            type: "picture"
            description: "ROC曲線"
        downloads:
        - name: Log
          description: AIT実行ログ
        - name: ConfusionMatrixCSV
          description: 混同行列
    AITDetailList:
      type: array
      items:
        properties:
          schema:
            $ref: "#/components/schemas/AITDetail"
    User:
      type: object
      description: |
        ユーザ情報
      properties:
        Id:
          type: integer
        OrganizerId:
          type: string
        Name:
          type: string
        AccountId:
          type: string
        Roles:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/UserRole'
          enum:
            - admin
            - mlmanager
            - user
        CreationDatetime:
          type: string
        UpdateDatetime:
          type: string
      example:
        Id: 1
        OrganizerId: team-A
        Name: JohnDoe
        AccountId: TestUser
        Roles:
          - Role: mlmanager
            TargetMLComponentId: 1
          - Role: User
            TargetMLComponentId: 2
        CreationDatetime: "2021-09-07T11:22:03.920542"
        UpdateDatetime: "2021-09-07T11:22:03.920542"
    UserRole:
      type: object
      description: |
        ユーザ権限情報
      properties:
        Role:
          type: string
          enum:
            - admin
            - mlmanager
            - user
        TargetMLComponentId:
          type: integer
          description: mlmanager|userの場合、必須要素
      example:
        Role: mlmanager
        TargetMLComponentId: 1
    QualityDimension:
      type: object
      description: |
        品質特性情報
      properties:
        Id:
          type: integer
        GuidelineId:
          description: 関連するガイドラインID
          type: integer
        Name:
          type: string
        Description:
          type: string
        SubDimensions:
          description: サブ品質特性（カンマ区切りの配列形式）
          type: string
        QualityDimensionLevels:
          type: array
          description: 品質特性レベル
          items:
            type: object
            properties:
              QualityDimensionLevelId:
                type: string
              Name:
                type: string
              Description:
                type: string
              Level:
                type: integer
        Url:
          type: string
        CreationDatetime:
          type: string
        UpdateDatetime:
          type: string
      example:
        Id: 1
        GuidelineId: 1
        Name: "Diversity_of_test_data"
        Description: "Diversity of test data"
        SubDimensions: "Accuracy_of_traained_model,Robustness_of_trained_model"
        QualityDimensionLevels:
          - QualityDimensionLevelId: "A"
            Name: "name A"
            Description: "description A"
            Level: 0
          - QualityDimensionLevelId: "B"
            Name: "name B"
            Description: "description B"
            Level: 1
        Url: "https://hostnmae/quality-dimension/api/0.0.1/AIQM_Guideline/Diversity_of_test_data"
        CreationDatetime: "2021/04/01 09:01:24"
        UpdateDatetime: "2021/06/15 11:31:56"
    Organizer:
      type: object
      description: |
        組織情報
      properties:
        Id:
          type: integer
        OrganizerId:
          type: string
        Name:
          type: string
        CreationDatetime:
          type: string
        UpdateDatetime:
          type: string
      example:
        Id: 1
        OrganizerId: team-A
        Name: Aチーム
        CreationDatetime: "2021-09-07T11:22:03.920542"
        UpdateDatetime: "2021-09-07T11:22:03.920542"

    ValidationOutput:
      type: object
      description: AIT新規投稿時の簡易検査に失敗した際の詳細な出力
      properties:
        location:
          type: string
          description: >
            問題が見つかった場所（ファイル，ディレクトリ構成，行番号等）
        detail:
          type: string
          description: >
            見つかった問題の詳細
      example:
        location: "in file: /eval_find_ca_error_0.1/develop/ait.manifest.json"
        detail: "required field type: 'name' is not specified."

  securitySchemes:
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: JSESSIONID  # cookie name

security:
  - cookieAuth: []
